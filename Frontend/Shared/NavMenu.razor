@using Models
<nav class="navbar">
    <div class="container-xxl gx-5 justify-content-center justify-content-sm-between">
        <div class="nav-item mb-2 mb-sm-0 mx-3 mx-sm-0">
            <NavLink class="navbar-brand p-0" href="" Match="NavLinkMatch.All">
                <img width="auto" height="28" src="/images/atriaLogo.png" alt="logo"/>
            </NavLink>
        </div>

        <div class="nav nav-pills">
            <div class="nav-item me-md-3 me-2">
                <NavLink href="faq" ActiveClass="link-active">
                    <ion-icon name="help-circle-outline"></ion-icon>
                </NavLink>
            </div>
            <AuthView>
                <Authorized>
                    <div class="nav-item me-md-3 me-2">
                        <NavLink href="settings" ActiveClass="link-active">
                            <ion-icon name="settings-outline"></ion-icon>
                        </NavLink>
                    </div>
                    <div class="nav-item me-md-3 me-2">
                        <NavLink href="notifications" ActiveClass="link-active">
                            <ion-icon name="notifications-outline"></ion-icon>
                        </NavLink>
                    </div>
                    <div class="nav-item me-md-3 me-2">
                        <NavLink href="newWse" ActiveClass="link-active">
                            <ion-icon name="add-circle-outline"></ion-icon>
                        </NavLink>
                    </div>
                    <div class="nav-item">
                        <div class="dropdown">
                            @if (LoginState.User!.ProfilePicture != null) {
                                <img class="miniAvatar" src="@(LoginState.User.ProfilePicture)" type="button" data-bs-toggle="dropdown" alt="avatar"/>
                            } else {
                                <ion-icon type="button" data-bs-toggle="dropdown" name="person-circle-outline"></ion-icon>
                            }
                            <ul class="dropdown-menu dropdown-menu-end mt-3">
                                <li><a class="dropdown-item" href="profile">Mein Konto</a></li>
                                <li><a class="dropdown-item" href="profile?type=bookmarks">Meine Lesezeichen</a></li>
                                <li><a class="dropdown-item" href="profile?type=ratings">Meine Bewertungen</a></li>
                                <li><a class="dropdown-item" href="profile?type=drafts">Meine Entwürfe</a></li>
                                <li><hr class="dropdown-divider"></li>
                                <li><button class="dropdown-item fw-bold text-danger" @onclick="Logout">Abmelden</button></li>
                            </ul>
                        </div>
                    </div>
                </Authorized>
                <NotAuthorized>
                    <div class="nav-item me-md-3 me-2">
                        <NavLink class="nav-link btn-outline-primary py-1" href="@_loginUrl">Einloggen</NavLink>
                    </div>
                    <div class="nav-item">
                        <NavLink class="nav-link btn-outline-primary py-1" href="register">Registrieren</NavLink>
                    </div>
                </NotAuthorized>
            </AuthView>
        </div>
    </div>
</nav>

@code {

    [CascadingParameter]
    private LoginState LoginState { get; set; } = null!;

    [Inject]
    private HttpClient HttpClient { get; set; } = null!;

    [Inject]
    private NavigationManager NavigationManager { get; set; } = null!;

    private string _loginUrl = null!;

    protected override void OnInitialized() {
        _loginUrl = "login?returnurl=" + NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
    }

    private async Task Logout() {
        await HttpClient.PostAsync("auth/logout", null);
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }

}
