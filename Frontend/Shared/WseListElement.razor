@using Models
@inject NavigationManager NavigationManager
@using Services
@using System.Net

<div class="card-body">
    <div class="row mb-1">
        <div class="col-auto">
            <i class="fa-solid fa-circle @_onlineStatusStyle"></i>
        </div>

        <div class="col-auto ps-0 d-flex d-block">
            <h5>
                <NavLink href="@_wseLink">
                    @Entry.Name
                </NavLink>
            </h5>
        </div>

        <div class="col-auto ps-0 ms-auto d-flex d-block">
            <div class="d-flex justify-content-sm-end justify-content-start flex-wrap align-items-center">
                <AuthView>
                    <Authorized>
                        @{
                            var bookmarkState = LoginState.User!.Bookmarks.Any(webserviceEntry => webserviceEntry.Id == Entry.Id);
                            var bookmarkTitle = bookmarkState ? "Lesezeichen entfernen" : "Als Lesezeichen hinzufügen";
                            var bookmarkStyle = bookmarkState ? "fa-solid" : "fa-regular";
                        }
                        <i class="fa-bookmark @bookmarkStyle fs-5 ms-3" type="button" style="color: #dc3545"
                           title="@bookmarkTitle" @onclick="() => ChangeBookmarkStatus(Entry, bookmarkState)">
                        </i>
                    </Authorized>
                    <NotAuthorized>
                        <i class="fa-bookmark fa-regular fs-5 ms-3" type="button" style="color: #dc3545"
                           title="Als Lesezeichen hinzufügen" @onclick="NavigateToLogin">
                        </i>
                    </NotAuthorized>
                </AuthView>
            </div>
            <div class="ms-3" style="min-width: fit-content">
                <Rating ReviewAverage="@_reviewAverage"/>
            </div>
        </div>
    </div>

    <div class="row mb-1">
        <div class="col">
            @Entry.ShortDescription
        </div>
        <div class="col-auto ms-auto">
	        <Tooltip Text="@Entry.ViewCount.ToString("N0")">
		        @NiceNumberFormatterService.NiceFormat(Entry.ViewCount)
	        </Tooltip>
	        @(" Aufruf" + (Entry.ViewCount == 1 ? "" : "e"))
        </div>
    </div>

    <div class="row mb-2">
        @foreach (Tag tag in Entry.Tags) {
            <div class="col-auto pe-0">
                <span class="badge bg-info me-2">@tag.Name</span>
            </div>
        }
    </div>

    <div class="row justify-content-between">
	    <div class="col">
		    <Tooltip Text="@Entry.CreatedAt.ToString()">
			    @NiceTimeSpanFormatterService.NiceFormat(DateTimeOffset.UtcNow - Entry.CreatedAt)
		    </Tooltip>
	    </div>
        <div class="col-auto">
            <NavLink href="@Entry.Link">
                <i class="fa-solid fa-arrow-up-right-from-square text-decoration-none fs-4" title="Zur Webservice"></i>
            </NavLink>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public WebserviceEntry Entry { get; set; } = null!;

    [CascadingParameter]
    private LoginState LoginState { get; set; } = null!;

    [Inject]
    private HttpClient HttpClient { get; set; } = default!;

    private string _onlineStatusStyle = "text-secondary";
    private string _wseLink = "";

    @* TODO implement; Maybe display review count as tooltip? *@
    private double _reviewAverage { get; set; }

    protected override void OnParametersSet() {
        _wseLink = "/wse/" + Entry.Id;
    }

    protected override async Task OnParametersSetAsync() {
        var response = await HttpClient.GetAsync($"wse/{Entry.Id}/checks/latest");
        if (response.StatusCode == HttpStatusCode.OK) {
            if (await response.Content.ReadFromJsonAsync<bool>()) {
                _onlineStatusStyle = "text-success";
            } else {
                _onlineStatusStyle = "text-danger";
            }
        } else {
            _onlineStatusStyle = "text-secondary";
        }
        await GetAvgReview();
    }

    private void NavigateToLogin() {
        NavigationManager.NavigateTo("login");
    }

    private async Task ChangeBookmarkStatus(WebserviceEntry entry, bool bookmarkState) {
        if (bookmarkState) {
            var response = await HttpClient.PostAsync($"user/{LoginState.User!.Id}/bookmarks/remove/{entry.Id}", null);
            if (response.IsSuccessStatusCode) {
                var set = (HashSet<WebserviceEntry>)LoginState.User.Bookmarks;
                set.RemoveWhere(webserviceEntry => webserviceEntry.Id == entry.Id);
                LoginState.User.Bookmarks = set;
            }
        } else {
            var response = await HttpClient.PostAsync($"user/{LoginState.User!.Id}/bookmarks/add/{entry.Id}", null);
            if (response.IsSuccessStatusCode) {
                LoginState.User.Bookmarks.Add(entry);
            }
        }
        NavigationManager.NavigateTo(NavigationManager.Uri);
    }

    private async Task GetAvgReview() {
        Review[] allReviews = await HttpClient.GetFromJsonAsync<Review[]>("wse/" + Entry.Id + "/review?page=" + 1 + "&entriesPerPage=" + 1000) ?? new Review[] { };
        double sum = 0;
        foreach (Review review in allReviews) {
            sum += (int)review.StarCount;
        }
        _reviewAverage = sum / allReviews.Count();
    }

}
