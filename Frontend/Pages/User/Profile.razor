@page "/profile"
@using Models
@using Models.DTO
@inject NavigationManager NavigationManager

<div class="container-xl">
    <div class="row pt-4 px-md-2">
        <div class="col-3">
            @if (!_displayForm) {
                <div class="mb-4 text-center">
                    <img src="images/default_avatar.png" class="avatar avatar-w"/>
                </div>
                <div>@User.Title</div>
                <h5>@User.FirstNames @User.LastName</h5>
                <div>@User.Biography</div>
                <div class="top-border pt-2 mt-2">@User.Email</div>

                    @*TODO logged in logic*@
                @if (_isLoggedIn) {
                    <div class="top-border pt-3 mt-2 d-flex">
                        <button type="button" class="btn-success btn flex-fill" @onclick="() => _displayForm = !_displayForm">Profil bearbeiten</button>
                    </div>
                }
            }
            else {
                <EditForm Model="User" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator></DataAnnotationsValidator>
                    <div class="text-center mb-4">
                        <label for="image_upload" class="w-100 avatar-w" style="cursor: pointer" title="Bild ändern">
                            <img src="images/default_avatar.png" class="avatar avatar-w"/>
                        </label>
                        <InputFile OnChange="@LoadFiles" id="image_upload" style="display: none"></InputFile>
                    </div>
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="User.FirstNames" id="first_name" type="text" class="form-control" placeholder="Vorname"></InputText>
                        <label for="first_name" class="form-label">Vorname</label>
                    </div>
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="User.LastName" id="last_name" type="text" class="form-control" placeholder="Nachname"></InputText>
                        <label for="last_name" class="form-label">Nachname</label>
                    </div>
                    <div class="form-floating mb-3">
                        <InputTextArea @bind-Value="User.Biography" id="bio" class="form-control" style="height: 7rem"></InputTextArea>
                        <label for="bio" class="form-label">Bio</label>
                    </div>
                    <div class="top-border pt-2 mb-3">
                        <div class="form-floating">
                            <InputText readonly type="email" id="email" class="form-control-plaintext" @bind-Value="User.Email" placeholder="Email"></InputText>
                            <label for="email" class="form-label">Email-Adresse</label>
                        </div>
                    </div>
                    <div class="d-flex justify-content-between mb-3">
                        <button type="submit" class="btn btn-success">Speichern</button>
                        <button type="button" class="btn btn-danger" @onclick="ResetDto">Zurücksetzen</button>
                    </div>
                    <ValidationSummary></ValidationSummary>
                </EditForm>
            }
        </div>
        <div class="col">
            <div class="d-flex">
                <div class="nav nav-tabs me-auto profile-nav">
                    <NavLink href="profile?type=wse" class="nav-link" Match="NavLinkMatch.All">WSE</NavLink>
                    <NavLink href="profile?type=bookmarks" class="nav-link">Lesezeichen</NavLink>
                    <NavLink href="profile?type=ratings" class="nav-link">Bewertungen</NavLink>
                    <NavLink href="profile?type=drafts" class="nav-link">Entwürfe</NavLink>
                </div>
                <div class="py-2 px-3">
                    <input class="profile-searchbar" type="search" @bind-value="_filter" placeholder="Search by Name">
                </div>
            </div>

            <div class="list-group list-group-flush profile-data-list">
                @switch (Type) {
                    case "wse":
                        <WSE SummaryDtos="_summaryDtos"/>
                        break;
                    case "bookmarks":
                        <WSE SummaryDtos="_summaryDtos"/>
                        break;
                    case "ratings":
                        <Ratings/>
                        break;
                    case "drafts":
                        <WSE SummaryDtos="_summaryDtos"/>
                        break;
                    default:
                        NavigationManager.NavigateTo(NavigationManager.GetUriWithQueryParameter("type", "wse"));
                        break;
                }
            </div>
        </div>
    </div>
</div>

@code {

    private bool _isLoggedIn = true;
    private bool _displayForm = false;

    [Parameter]
    [SupplyParameterFromQuery]
    public string? Type { get; set; } = "";

    private IList<WSESummaryDto> _summaryDtos = null!;

    private string? _filter;

    [Parameter]
    public UserDto User { get; set; } = null!;

    private UserDto _cloneUserDto = null!;

    protected override void OnInitialized() {
        @* Mock Data generation *@
        User = new UserDto {
            FirstNames = "Hans",
            Biography = "Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna ",
            Email = "hans@hansi.hansen",
            Title = "Herr Prof Dr",
            LastName = "Hansemann"
        };
        
        CloneUser();
        
        _summaryDtos = new List<WSESummaryDto>();
        WSESummaryDto wseSummaryDto1 = new WSESummaryDto("hans", "der hans", new List<Tag>(), DateTimeOffset.Now, true, 3.5, 10, new Uri("http://www.google.com"));
        _summaryDtos.Add(wseSummaryDto1);

        WSESummaryDto wseSummaryDto2 = new WSESummaryDto("günther", "der günther", new List<Tag>(), DateTimeOffset.Now, false, 3.5, 10, new Uri("http://www.duckduckgo.com"));
        _summaryDtos.Add(wseSummaryDto2);
        _summaryDtos.Add(wseSummaryDto1);

        @* mock data generation end *@

        if (Type is null or "") {
            NavigationManager.NavigateTo(NavigationManager.GetUriWithQueryParameter("type", "wse"));
        }
    }

    private void ResetDto() {
        User.FirstNames = _cloneUserDto.FirstNames;
        User.LastName = _cloneUserDto.LastName;
        User.Email = _cloneUserDto.Email;
        User.Biography = _cloneUserDto.Biography;
        User.Title = _cloneUserDto.Title;
        _displayForm = !_displayForm;
    }

    private void LoadFiles(InputFileChangeEventArgs e) {
        @* TODO implement *@
    }
    
    private void HandleValidSubmit() {
        _displayForm = !_displayForm;
        CloneUser();
        @* TODO implement backend communication *@
    }

    private void CloneUser() {
        _cloneUserDto = new UserDto {
            FirstNames = User.FirstNames,
            LastName = User.LastName,
            Email = User.Email,
            Title = User.Title,
            Biography = User.Biography
        };
    }

}
