@page "/profile/{UserId:long}"
@using Models
@using System.Net
@using Frontend.Pages.WSE.Components.FilterModal
@inject NavigationManager NavigationManager

@if (_user is not null) {
    <div class="container-xxl">
        <div class="row mt-4">
            <div class="col-12 col-xl-3">
                <div class="p-3 mb-3" style="box-shadow: rgba(0, 0, 0, 0.24) 0 3px 8px; border-radius: 0.375rem">
                    @if (!_displayForm) {
                        <div class="d-flex flex-column">
                            <div class="d-flex flex-column flex-sm-row flex-xl-column">
                                <div class="mb-3 me-0 me-sm-3 me-xl-0 align-items-center justify-content-center d-flex">
                                    @if (_user.ProfilePicture is not null) {
                                        <img class="avatar avatar-w" alt="" src="@_user.ProfilePicture">
                                    } else {
                                        <img class="avatar avatar-w" alt="default avatar" src="images/default_avatar.png"/>
                                    }
                                </div>
                                <div class="d-flex flex-column justify-content-center">
                                    <div>@_user.Title</div>
                                    <h5>@_user.FirstNames @_user.LastName</h5>
                                    <div>@_user.Biography</div>
                                    <div class="top-border pt-2 mt-2 mb-2">@_user.Email</div>
                                </div>
                            </div>
                            <AuthView UserIdClaim="UserId">
                                <AuthorizedAndMatching>
                                    <div class="top-border pt-3 d-flex">
                                        <button type="button" class="btn-success btn flex-fill" @onclick="() => _displayForm = !_displayForm">Profil bearbeiten</button>
                                    </div>
                                </AuthorizedAndMatching>
                            </AuthView>

                        </div>
                    } else {
                        <EditForm Model="_user" OnValidSubmit="HandleValidSubmit">
                            <DataAnnotationsValidator></DataAnnotationsValidator>
                            <div class="d-flex flex-column">
                                <div class="d-flex flex-column flex-sm-row flex-xl-column">
                                    <div class="me-0 me-sm-3 me-xl-0 align-items-center justify-content-center d-flex flex-column">
                                        <div class="mb-3">
                                            @if (_user.ProfilePicture is not null) {
                                                <img class="avatar avatar-w" alt="" src="@_user.ProfilePicture">
                                            } else {
                                                <img class="avatar avatar-w" alt="default avatar" src="images/default_avatar.png"/>
                                            }
                                        </div>
                                        <div class="form-floating mb-3">
                                            <InputText @bind-Value="_user.ProfilePicture" id="picture" type="text" class="form-control" placeholder="Link zu Profilbild"></InputText>
                                            <label for="picture" class="form-label">Link zu Profilbild</label>
                                        </div>
                                    </div>
                                    <div class="flex-fill">
                                        <div class="form-floating mb-3">
                                            <InputText @bind-Value="_user.Title" id="title" type="text" class="form-control" placeholder="Titel"></InputText>
                                            <label for="title" class="form-label">Titel</label>
                                        </div>
                                        <div class="form-floating mb-3">
                                            <InputText @bind-Value="_user.FirstNames" id="first_name" type="text" class="form-control" placeholder="Vorname"></InputText>
                                            <label for="first_name" class="form-label">Vorname</label>
                                        </div>
                                        <div class="form-floating mb-3">
                                            <InputText @bind-Value="_user.LastName" id="last_name" type="text" class="form-control" placeholder="Nachname"></InputText>
                                            <label for="last_name" class="form-label">Nachname</label>
                                        </div>
                                        <div class="form-floating mb-3">
                                            <InputTextArea @bind-Value="_user.Biography" id="bio" class="form-control"></InputTextArea>
                                            <label for="bio" class="form-label">Bio</label>
                                        </div>
                                        <div class="top-border pt-2">
                                            <div class="form-floating">
                                                <InputText readonly type="email" id="email" class="form-control-plaintext" @bind-Value="_user.Email" placeholder="Email"></InputText>
                                                <label for="email" class="form-label">Email-Adresse</label>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="d-flex justify-content-between px-3 px-xl-0 pt-3 top-border">
                                    <button type="submit" class="btn btn-success">Speichern</button>
                                    <button type="button" class="btn btn-danger" @onclick="ResetDto">Zurücksetzen</button>
                                </div>
                            </div>
                            <ValidationSummary></ValidationSummary>
                        </EditForm>
                    }
                </div>
            </div>
            <div class="col">
                <div class="d-flex flex-wrap justify-content-between">
                    <div class="nav nav-pills mb-2">
                        <NavLink href="@NavigateType(null)" class="nav-link me-2" Match="NavLinkMatch.All">WSE</NavLink>
                        <NavLink href="@NavigateType("bookmarks")" class="nav-link me-2">Lesezeichen</NavLink>
                        <NavLink href="@NavigateType("reviews")" class="nav-link me-2">Bewertungen</NavLink>
                        <AuthView UserIdClaim="UserId">
                            <AuthorizedAndMatching>
                                <NavLink href="@NavigateType("drafts")" class="nav-link">Entwürfe</NavLink>
                            </AuthorizedAndMatching>
                        </AuthView>
                    </div>

                    <div class="d-flex mb-2 ms-auto">
                        @if (Type is null or "wse" or "bookmarks") {
                            <FilterModal IsOnline="IsOnline" HasBookmark="HasBookmark" SelectedStarNum="SelectedStarNum" SelectedTagsStr="SelectedTagsStr"></FilterModal>
                        }

                        <div class="ms-3 d-flex">
                            <div class="form-control form-control-sm border" style="box-shadow: rgba(0, 0, 0, 0.24) 0 3px 8px; border-radius: 0.375rem">
                                <div class="input-group input-group-sm">
                                    <button class="btn btn-sm btn-link text-dark" @onclick="Search">
                                        <i class="fa fa-search"></i>
                                    </button>
                                    <input type="search" class="form-control form-control-sm border-0" placeholder="Suche nach..." @bind-value="Query" @onkeyup="SearchInput">
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="w-100 mt-2 mb-4">
                    @switch (Type) {
                        case null or "wse":
                            <WseSummaryList Entries="_webserviceEntries"/>
                            break;
                        case "bookmarks":
                            <WseSummaryList Entries="_webserviceEntries"/>
                            break;
                        case "reviews":
                            <ReviewList Reviews="_reviews"/>
                            break;
                        case "drafts":
                            <AuthView UserIdClaim="UserId">
                                <AuthorizedAndMatching>
                                    <WseSummaryList Entries="_webserviceEntries"/>
                                </AuthorizedAndMatching>
                            </AuthView>
                            break;
                        default:
                            NavigationManager.NavigateTo(NavigationManager.GetUriWithQueryParameter("type", (string)null!));
                            break;
                    }
                </div>
            </div>
        </div>
    </div>

    @if (_numberOfPages >= 2) {
        <Pagination NumberOfPages="_numberOfPages" CurrentPage="Page" Radius="3"></Pagination>
    }
} else if (_userNotFound) {
    <NotFound></NotFound>
}

@code {

    [Parameter]
    [SupplyParameterFromQuery]
    public string? Type { get; set; }

    //Filter and Query start
    [Parameter]
    [SupplyParameterFromQuery]
    public string? Query { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public bool? IsOnline { get; set; } = false;

    [Parameter]
    [SupplyParameterFromQuery]
    public bool? HasBookmark { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "minRating")]
    public int? SelectedStarNum { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "tags")]
    public string[]? SelectedTagsStr { get; set; }

    // Filter and Query end

    [Parameter]
    [SupplyParameterFromQuery]
    public int Page { get; set; } = 1;

    // UserId from Url
    [Parameter]
    public long UserId { get; set; }

    [CascadingParameter]
    public LoginState LoginState { get; set; } = default!;

    [Inject]
    private HttpClient HttpClient { get; set; } = default!;

    private bool _displayForm;
    private bool _userNotFound;

    // Pagination
    private int _numberOfPages;
    private int _numberOfEntries;

    // List for subcomponents
    private IEnumerable<WebserviceEntry> _webserviceEntries = new List<WebserviceEntry>();
    private IEnumerable<Review> _reviews = new List<Review>();
    private User? _user;

    // used for from reset
    private User _cloneUser = null!;

    protected override async Task OnInitializedAsync() {
        var response = await HttpClient.GetAsync($"user/{UserId}");
        if (response.IsSuccessStatusCode) {
            _user = await response.Content.ReadFromJsonAsync<User>();
            CloneUser();
        } else if (response.StatusCode == HttpStatusCode.NotFound) {
            _userNotFound = true;
        } else {
            NavigationManager.NavigateTo("/internal-server-error");
        }
    }

    protected override async Task OnParametersSetAsync() {
        if (!_userNotFound) {
            // Get only query parameters
            var queryString = NavigationManager
                .ToBaseRelativePath(NavigationManager.GetUriWithQueryParameter("type", (string) null!));
            var i = queryString.IndexOf('?');
            queryString = i != -1 ? queryString[queryString.IndexOf('?')..] : "";
            
            var response = await HttpClient.GetAsync($"user/{UserId}/{Type ?? "wse"}" + queryString);
            if (response.IsSuccessStatusCode) {
                switch (Type) {
                    case null or "wse":
                        _webserviceEntries = (await response.Content.ReadFromJsonAsync<IEnumerable<WebserviceEntry>>())!;
                        _numberOfEntries = _webserviceEntries.Count();
                        SetNumberOfPages(_numberOfEntries);
                        break;
                    case "bookmarks":
                        _webserviceEntries = (await response.Content.ReadFromJsonAsync<IEnumerable<WebserviceEntry>>())!;
                        _numberOfEntries = _webserviceEntries.Count();
                        SetNumberOfPages(_numberOfEntries);
                        break;
                    case "drafts":
                        _webserviceEntries = (await response.Content.ReadFromJsonAsync<IEnumerable<WebserviceEntry>>())!;
                        _numberOfEntries = _webserviceEntries.Count();
                        SetNumberOfPages(_numberOfEntries);
                        break;
                    case "reviews":
                        _reviews = (await response.Content.ReadFromJsonAsync<IEnumerable<Review>>())!;
                        _numberOfEntries = _reviews.Count();
                        SetNumberOfPages(_numberOfEntries);
                        break;
                }
            }
        }
    }

    private void ResetDto() {
        _user!.FirstNames = _cloneUser.FirstNames;
        _user.LastName = _cloneUser.LastName;
        _user.Email = _cloneUser.Email;
        _user.Biography = _cloneUser.Biography;
        _user.Title = _cloneUser.Title;
        _user.ProfilePicture = _cloneUser.ProfilePicture;
        _displayForm = !_displayForm;
    }

    private async void HandleValidSubmit() {
        _displayForm = !_displayForm;
        CloneUser();
        await HttpClient.PostAsJsonAsync("user", _user);
    }

    private void CloneUser() {
        _cloneUser = new User() {
            FirstNames = _user!.FirstNames,
            LastName = _user.LastName,
            Email = _user.Email,
            Title = _user.Title,
            Biography = _user.Biography,
            ProfilePicture = _user.ProfilePicture
        };
    }

    private string NavigateType(string? value) {
        if (value is null or "wse" or "bookmarks") {
            return NavigationManager.GetUriWithQueryParameter("type", value);
        }
        return NavigationManager.GetUriWithQueryParameters(new Dictionary<string, object?> {
            ["type"] = value,
            ["IsOnline"] = null,
            ["hasBookmark"] = null,
            ["minRating"] = null,
            ["tags"] = null
        });
    }

    private void SearchInput(KeyboardEventArgs evt) {
        if (evt.Key == "Enter") {
            Search();
        }
    }

    private void Search() {
        NavigationManager.NavigateTo(NavigationManager.GetUriWithQueryParameter("query", Query));
    }

    private void SetNumberOfPages(int numberOfResults) {
        _numberOfPages = (numberOfResults / 20) + 1;
    }

}
