@using Models
@using Models.DTO

@inject NavigationManager NavigationManager

<div class="modal" id="tagModal" tabindex="-1" aria-labelledby="tagModalLabel" aria-hidden="true" style="display:block; background-color: rgba(10,10,10,.8);">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="tagModalLabel">Filter</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="ModalClose"></button>
            </div>
            <div class="modal-body">
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="flexCheckOnline" @bind="IsOnline" />
                    <label class="form-check-label" for="flexCheckOnline">
                        <i class="fa-solid fa-circle text-success"></i>
                        Online
                    </label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="flexCheckBookmarks" @bind="IsBookmark" />
                    <label class="form-check-label" for="flexCheckBookmarks">
                        <i class="fa-solid fa-bookmark pe-1" style="color: red"></i>
                        Lesezeichen
                    </label>
                </div>

                <hr />

                <div>Bewertung</div>
                <div class="row mt-2">
                    <div class="col-5">
                        <div class="ui-field">
                            <select class="form-select form-select-sm" @bind="SelectedStarNum">
                                <option value="0" selected>0 oder mehr</option>
                                <option value="1">1 oder mehr</option>
                                <option value="2">2 oder mehr</option>
                                <option value="3">3 oder mehr</option>
                                <option value="4">4 oder mehr</option>
                            </select>
                        </div>
                    </div>
                    <div class="col-auto">
                        @for (int i = 1; i <= SelectedStarNum; i++)
                        {
                            <i class="fa fa-star rating-color me-1"></i>
                        }

                        @for (int i = 1; i <= (5 - SelectedStarNum); i++)
                        {
                            <i class="fa fa-star rating-uncolored me-1"></i>
                        }
                    </div>
                </div>

                <hr />

                <div class="ui-field">
                    <div class="form-control form-control-sm border p-0">
                        <div class="input-group input-group-sm">
                            <button class="btn btn-sm btn-link text-dark"><i class="fa fa-search"></i></button>
                            <input type="search" class="form-control form-control-sm border-0" placeholder="Suche nach..." @bind="TagQuery" @onkeyup="SearchTags">
                        </div>
                    </div>
                </div>
                <div class="row mt-3 mb-1">

                    @foreach (Tag tag in SelectedTags)
                    {
                        <div class="col-auto">
                            <h6>
                                <span class="badge bg-info">

                                    @tag.Name
                                    <button type="button" class="btn-close btn-close-white" aria-label="Close" @onclick="() => RemoveTag(tag)" />
                                </span>
                            </h6>
                        </div>

                    }
                </div>
                @*TODO InputSelect when EditForm added*@
                <div class="ui-field">
                    <select class="form-select mt-1" size="8" multiple @onchange="SelectedTagsChanged">
                        @foreach (Tag tag in SearchedTags)
                        {
                            <option value="@tag.Name">@tag.Name</option>
                        }
                    </select>
                </div>
                <div class="d-grid gap-2 mt-3 d-flex justify-content-end">
                    <button type="button" class="btn btn-outline-danger btn-small" @onclick="DeleteSelectedTags">Alle Tags Löschen</button>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-success" @onclick="ModalApply">Anwenden</button>
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    [Parameter]
    public bool? IsOnline { get; set; }

    [Parameter]
    public bool? IsBookmark { get; set; }

    [Parameter]
    public int? SelectedStarNum { get; set; }

    [Parameter]
    public string[]? SelectedTagsStr { get; set; } = new string[] { };

    public string[]? SelectedTagsStrB { get; set; } = new string[] { };

    private readonly TagDto _tagDto = new();

    private List<Tag> MockTags = new List<Tag>();

    private string? TagQuery { get; set; }

    private List<Tag> SelectedTags = new List<Tag>();

    private List<Tag> SearchedTags = new List<Tag> { };

    @*------------MODAL------------*@
    public Task ModalClose()
    {
        return OnClose.InvokeAsync(false);
    }

    public Task ModalApply()
    {

        NavigationManager.NavigateTo(NavigationManager.GetUriWithQueryParameters(
            new Dictionary<string, object?>
                {
                    ["IsOnline"] = IsOnline,
                    ["IsBookmark"] = IsBookmark,
                    ["minRating"] = SelectedStarNum,
                    ["tags"] = SelectedTagsStr,
                }));
        return OnClose.InvokeAsync(true);
    }

    @*------------TAG SEARCH------------*@
    private void SearchTags(KeyboardEventArgs evt)
    {
        SearchedTags = new List<Tag> { };

        if (evt.Key == "Enter" && TagQuery is not null)
        {
            foreach (Tag tag in MockTags)
            {
                if (tag.Name.Contains(TagQuery, StringComparison.CurrentCultureIgnoreCase))
                {
                    SearchedTags.Add(tag);
                }
            }
        }
    }


    @*------------TAGS------------*@
    protected override void OnInitialized()
    {

        /*mock tags*/
        MockTags.Add(new() { Name = "Suchmaschine1", CreationTime = DateTimeOffset.Now, UseCount = 1 });
        MockTags.Add(new() { Name = "Lexikon34", CreationTime = DateTimeOffset.Now, UseCount = 34 });
        MockTags.Add(new() { Name = "Wörterbuch6", CreationTime = DateTimeOffset.Now, UseCount = 6 });
        MockTags.Add(new() { Name = "Tool2", CreationTime = DateTimeOffset.Now, UseCount = 2 });
        MockTags.Add(new() { Name = "Webservice2", CreationTime = DateTimeOffset.Now, UseCount = 2 });
        MockTags.Add(new() { Name = "Suchmaschine2", CreationTime = DateTimeOffset.Now, UseCount = 2 });
        MockTags.Add(new() { Name = "Wörterbuch4", CreationTime = DateTimeOffset.Now, UseCount = 4 });
        MockTags.Add(new() { Name = "Tool3", CreationTime = DateTimeOffset.Now, UseCount = 3 });

        SearchedTags = MockTags;
        SearchedTags = SearchedTags.OrderBy(tag => tag.Name).ToList();


        foreach (string str in SelectedTagsStr) //visibility of previous apllied tags
        {
            foreach (Tag tag in MockTags)
            {
                if (str.Equals(tag.Name))
                {
                    SelectedTags.Add(tag);
                }
            }

        }
    }

    private void DeleteSelectedTags()
    {
        SelectedTags = new List<Tag>();
        SelectedTagsStr = new string[] { };
    }

    private void RemoveTag(Tag tag)
    {
        SelectedTags = SelectedTags.Where(t => t.Name != tag.Name).ToList();
    }

    private void SelectedTagsChanged(ChangeEventArgs e)
    {
        if (e.Value is not null)
        {

            SelectedTagsStrB = (string[])e.Value;
        }
        foreach (string str in SelectedTagsStrB)
        {

            if (!SelectedTags.Exists(t => t.Name == str))
            {
                Tag selectedTag = MockTags.Find(t => t.Name == str) ?? throw new ArgumentException("Tag cannot be null");
                SelectedTags.Add(selectedTag);
                SelectedTagsStr = SelectedTagsStr.Concat(new String[] { selectedTag.Name }).ToArray();


            }

        }
    }
    }