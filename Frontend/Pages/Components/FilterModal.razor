@using Models
@using Models.DTO

@inject NavigationManager NavigationManager

<div class="modal" id="tagModal" tabindex="-1" aria-labelledby="tagModalLabel" aria-hidden="true" style="display:block; background-color: rgba(10,10,10,.8);">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="tagModalLabel">Filter</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="ModalClose"></button>
            </div>
            <div class="modal-body">
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="flexCheckOnline" @bind="IsOnline"/>
                    <label class="form-check-label" for="flexCheckOnline">
                        <i class="fa-solid fa-circle text-success"></i>
                        Online
                    </label>
                </div>
                @*
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="flexCheckBookmarks" @bind="IsBookmark" />
                    <label class="form-check-label" for="flexCheckBookmarks">
                        <i class="fa-solid fa-bookmark pe-1" style="color: red"></i>
                        Lesezeichen
                    </label>
                </div>
                *@
                <hr/>

                <div>Bewertung</div>
                <div class="row mt-2">
                    <div class="col-5">
                        <div class="ui-field">
                            <select class="form-select form-select-sm" @bind="SelectedStarNum">
                                <option value="0" selected>0 oder mehr</option>
                                <option value="1">1 oder mehr</option>
                                <option value="2">2 oder mehr</option>
                                <option value="3">3 oder mehr</option>
                                <option value="4">4 oder mehr</option>
                            </select>
                        </div>
                    </div>
                    <div class="col-auto">
                        @for (int i = 1; i <= SelectedStarNum; i++) {
                            <i class="fa fa-star rating-color me-1"></i>
                        }

                        @for (int i = 1; i <= (5 - SelectedStarNum); i++) {
                            <i class="fa fa-star rating-uncolored me-1"></i>
                        }
                    </div>
                </div>
                <hr/>
                <TagList @bind-SelectedTags="_selectedTags" SearchedTags="_searchedTags" AllTags="_tags"></TagList>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-success" @onclick="ModalApply">Anwenden</button>
            </div>
        </div>
    </div>
</div>

@code {

    [Inject]
    public HttpClient HttpClient { get; set; } = default!;

    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    [Parameter]
    public bool? IsOnline { get; set; }

    [Parameter]
    public bool? hasBookmark { get; set; }

    [Parameter]
    public int? SelectedStarNum { get; set; }

    [Parameter]
    public string[]? SelectedTagsStr { get; set; }

    private IEnumerable<Tag> _tags = null!;

    private List<Tag> _selectedTags = null!;

    private List<Tag> _searchedTags = null!;

        @*------------MODAL------------*@

    private Task ModalClose() {
        return OnClose.InvokeAsync(false);
    }

    private Task ModalApply() {
        var selectedTagsAsString = _selectedTags.Select(tag => tag.Name).ToArray();
        NavigationManager.NavigateTo(NavigationManager.GetUriWithQueryParameters(new Dictionary<string, object?> {
            ["IsOnline"] = IsOnline,
            ["HasBookmark"] = hasBookmark,
            ["minRating"] = SelectedStarNum,
            ["tags"] = selectedTagsAsString,
        }));
        return OnClose.InvokeAsync(true);
    }

    protected override async Task OnInitializedAsync() {
        _tags = await HttpClient.GetFromJsonAsync<IList<Tag>>("tag") ?? new List<Tag>();
        _searchedTags = _tags.OrderByDescending(tag => tag.UseCount).ToList();
        _selectedTags = SelectedTagsStr is null ? new List<Tag>() : _tags
            .Where(tag => SelectedTagsStr.Contains(tag.Name))
            .ToList();
    }

}
