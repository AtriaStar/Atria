@using Models
@inject NavigationManager NavigationManager

<div class="modal" id="tagModal" tabindex="-1" aria-labelledby="tagModalLabel" aria-hidden="true" style="display:block; background-color: rgba(10,10,10,.8);">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="tagModalLabel">Filter</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="() => ModalClose()"></button>
            </div>

            <div class="modal-body">

                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="flexCheckOnline" @bind="IsOnline"/>
                    <label class="form-check-label" for="flexCheckOnline">
                        <i class="fa-solid fa-circle text-success"></i>
                        Online
                    </label>
                </div>

                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="flexCheckBookmarks" @bind="IsBookmark"/>
                    <label class="form-check-label" for="flexCheckBookmarks">
                        <i class="fa-solid fa-bookmark pe-1" style="color: red"></i>
                        Lesezeichen
                    </label>
                </div>

                <hr/>

                <div>Bewertung</div>
                <div class="row mt-2">
                    <div class="col-5">
                        <div class="ui-field">
                            <select class="form-select form-select-sm" @bind="SelectedStarNum">
                                <option value="0" selected>0 oder mehr</option>
                                <option value="1">1 oder mehr</option>
                                <option value="2">2 oder mehr</option>
                                <option value="3">3 oder mehr</option>
                                <option value="4">4 oder mehr</option>
                            </select>
                        </div>
                    </div>
                    <div class="col-auto">
                        @for (int i = 1; i <= SelectedStarNum; i++)
                        {
                            <i class="fa fa-star rating-color me-1"></i>
                        }

                        @for (int i = 1; i <= (5 - SelectedStarNum); i++)
                        {
                            <i class="fa fa-star rating-uncolored me-1"></i>
                        }
                    </div>
                </div>

                <hr/>

                <div class="col-auto d-flex justify-content-end mb-2">
                    <div class="ui-field">
                        <div class="form-control form-control-sm border p-0">
                            <div class="input-group input-group-sm">
                                <button class="btn btn-sm btn-link text-dark"><i class="fa fa-search"></i></button>
                                <input type="search" class="form-control form-control-sm border-0" placeholder="Suche nach..." @bind="TagQuery" @onkeyup="SearchTags">
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row mt-3 mb-1">
                    @foreach (string tag in SelectedTags)
                    {
                        <div class="col-auto">
                            <h6>
                                <span class="badge bg-info">
                                    @tag
                                    <button type="button" class="btn-close btn-close-white" aria-label="Close" @onclick="() => RemoveTag(tag)"></button>
                                </span>
                            </h6>
                        </div>
                    }
                </div>

                <label class="text-muted">(zum Auswählen Strg gedrückt halten)</label>
                @*TODO InputSelect when EditForm added*@
                <div class="ui-field">
                    <select class="form-select mt-1" size="8" multiple @onchange="SelectedTagsChanged">
                        @foreach (string tag in SearchedTags) {
                            <option value="@tag">@tag</option>
                        }
                    </select>
                </div>
                <div class="d-grid gap-2 mt-3 d-flex justify-content-end">
                    <button type="button" class="btn btn-outline-danger btn-small" @onclick="() => DeleteSelectedTags()">Alle Tags Löschen</button>
                </div>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-success" @onclick="() => ModalApply()">Anwenden</button>
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    [Parameter]
    public bool? IsOnline { get; set; }

   [Parameter]
    public bool? IsBookmark { get; set; }
    [Parameter]
    public int? SelectedStarNum { get; set; }

   [Parameter]
    public string[]? SelectedTags { get; set; } = new string[] { };

    private List<string> MockTags = new List<string> { };

    private List<string> SearchedTags = new List<string> { };

    private string? TagQuery { get; set; }

    @*------------MODAL------------*@
    public Task ModalClose()
    {
        return OnClose.InvokeAsync(false);
    }

    public Task ModalApply()
    {
        
        NavigationManager.NavigateTo(NavigationManager.GetUriWithQueryParameters(
            new Dictionary<string, object?>
            {
                ["IsOnline"] = IsOnline,
                ["IsBookmark"] = IsBookmark,
                ["minRating"] = SelectedStarNum,
                ["tags"] = SelectedTags
            }));
            

        return OnClose.InvokeAsync(true);
    }

    @*------------TAG SEARCH------------*@
    private void SearchTags(KeyboardEventArgs evt) {
        SearchedTags = new List<string> { };

        if (evt.Key == "Enter" && TagQuery is not null ) {
            foreach (string str in MockTags)
            {
                if (str.Contains(TagQuery, StringComparison.CurrentCultureIgnoreCase))
                {
                    SearchedTags.Add(str);
                }
            }
        }
    }

    @*------------TAGS------------*@
    protected override void OnInitialized()
    {
        @* Mock data gen *@
        MockTags.Add("Suchmaschine1");
        MockTags.Add("Lexikon");
        MockTags.Add("Wörterbuch6");
        MockTags.Add("Tool2");
        MockTags.Add("Webservice");
        MockTags.Add("Suchmaschine2");
        MockTags.Add("Wörterbuch4");
        MockTags.Add("Tool3");

        SearchedTags = MockTags;

        SearchedTags = SearchedTags.OrderBy(str => str).ToList();
    }

    private void DeleteSelectedTags()
    {
        SelectedTags = Array.Empty<string>();
    }

    private void RemoveTag(string tag)
    {
        SelectedTags = SelectedTags.Where(w => w != tag).ToArray();
    }

    private void SelectedTagsChanged(ChangeEventArgs e)
    {
        if (e.Value is not null)
        {
            SelectedTags = (string[])e.Value;
        }
    }

    /**private List<Tag> stringToTag(string[] tags)
    {
        List<Tag> convertedTags = new List<Tag>();
        foreach (string tagString in tags) 
        {
            convertedTags.Add(new() {Name = tagString, CreationTime = DateTimeOffset.Now, UseCount = 1});
        }
        return convertedTags;
    }**/
}