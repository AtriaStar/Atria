@page "/"
@using Models
@using Models.DTO
@inject NavigationManager NavigationManager

<PageTitle>Atria</PageTitle>

<div class="container-xxl">
    <div class="searchbar position-relative mb-3 mt-4">

        <div class="mb-2">
            <div class="form-control form-control-lg border p-0" style="box-shadow: rgba(0, 0, 0, 0.24) 3px 3px 3px">
                <div class="input-group input-group-lg">
                    <button class="btn btn-sm btn-link text-dark" @onclick="Search"><i class="fa fa-search"></i></button>
                    <input type="search" class="form-control form-control-lg border-0" placeholder="Suche nach..." @bind-value="Query" @onkeyup="SearchInput">
                </div>
            </div>
        </div>

    </div>
    <div class="d-flex flex-wrap">
        <div class="nav nav-pills mb-2">
            <div class="nav-item">
                <NavLink href="@Navigate("type", null)" class="nav-link" Match="NavLinkMatch.All">Webservice</NavLink>
            </div>
            <div class="nav-item ms-3">
                <NavLink href="@Navigate("type", "user")" class="nav-link">Nutzer</NavLink>
            </div>
        </div>
        <div class="d-flex mb-2 ms-auto">
            <button class="btn btn-outline-primary" type="button" @onclick="OpenFilterDialog">
                Filter
            </button>

            <div class="dropdown ms-3 d-flex">
                <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    Sortieren nach
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <NavLink href="@Navigate("sort", null)" class="dropdown-item" Match="NavLinkMatch.All">Relevanz</NavLink>
                    <NavLink href="@Navigate("sort", "useCount")" class="dropdown-item">Aufrufzahl aufsteigend</NavLink>
                    <NavLink href="@Navigate("sort", "useCount")" class="dropdown-item">Aufrufzahl absteigend</NavLink>
                    <NavLink href="@Navigate("sort", "reviewAverage")" class="dropdown-item">Bewertungsdurchschnitt aufsteigend</NavLink>
                    <NavLink href="@Navigate("sort", "reviewAverage")" class="dropdown-item">Bewertungsdurchschnitt absteigend</NavLink>
                    <NavLink href="@Navigate("sort", "recency")" class="dropdown-item">Neueste</NavLink>
                    <NavLink href="@Navigate("sort", "recency")" class="dropdown-item">Älteste</NavLink>
                </ul>
            </div>
        </div>
    </div>
    <div class="w-100 mt-2 mb-4">
        @switch (Type) {
            case null or "wse":
                <WseSummaryList SummaryDtos="@_summaryDtos"></WseSummaryList>
                break;
            case "user":
                <div class="row row-cols-1 row-cols-md-2 g-3">
                    <UserSummaryList UserDtos="@_userDtos"></UserSummaryList>
                </div>
                break;
            default:
                NavigationManager.NavigateTo(NavigationManager.GetUriWithQueryParameter("type", (string)null!));
                break;
        }
    </div>
</div>

@if (FilterDialogOpen) {
    <Frontend.Pages.Components.FilterModal OnClose="@OnFilterDialogClose"></Frontend.Pages.Components.FilterModal>
}

@code {

    [Parameter]
    [SupplyParameterFromQuery]
    public string? Sort { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string? Type { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string? Query { get; set; }

    private IList<WseSummaryDto> _summaryDtos = new List<WseSummaryDto>();
    private IList<UserDto> _userDtos = new List<UserDto>();

    private void SearchInput(KeyboardEventArgs evt) {
        if (evt.Key == "Enter") {
            Search();
        }
    }

    private void Search() {
        NavigationManager.NavigateTo(Navigate("query", Query));
    }

    protected override void OnInitialized() {
        @* Mock data gen *@
        WseSummaryDto wseSummaryDto1 = new WseSummaryDto {
            Id = 1,
            Name = "hans peter und der der sich selbst sehr mag",
            ShortDescription = "der hans der gerne mal einen apfel pflückt und isst",
            Tags = new List<Tag> {
                new() {
                    Name = "Tag1",
                    CreationTime = DateTimeOffset.Now,
                    UseCount = 1
                },
                new() {
                    Name = "Tag2",
                    CreationTime = DateTimeOffset.Now,
                    UseCount = 100
                }
            },
            CreationDate = DateTimeOffset.Now,
            IsOnline = true,
            AverageRating = 3.5,
            ViewCount = 1,
            Link = new Uri("https://www.google.com"),
            IsBookmark = true
        };
        _summaryDtos.Add(wseSummaryDto1);

        WseSummaryDto wseSummaryDto2 = new WseSummaryDto {
            Id = 1,
            Name = "peter",
            ShortDescription = "hans peter",
            Tags = new List<Tag>(),
            CreationDate = DateTimeOffset.Now,
            IsOnline = false,
            AverageRating = 5,
            ViewCount = 15,
            Link = new Uri("https://www.google.com")
        };
        _summaryDtos.Add(wseSummaryDto2);

        UserDto userDto = new UserDto {
            Email = "hans@peter",
            FirstNames = "Hans",
            LastName = "Peter",
            Biography = "Ich bin der Hans Peter und ich bin Alkoholiker",
            Title = "Dr."
        };

        _userDtos.Add(userDto);
        _userDtos.Add(userDto);
        _userDtos.Add(userDto);
        _userDtos.Add(userDto);
        _userDtos.Add(userDto);
    }


    private string Navigate(string key, string? value) {
        return NavigationManager.GetUriWithQueryParameter(key, value);
    }

    @*for tag modal*@
    private bool FilterDialogOpen { get; set; }

    private void OnFilterDialogClose(bool accepted) {
        FilterDialogOpen = false;
    }

    private void OpenFilterDialog() {
        FilterDialogOpen = true;
    }

}