@page "/"
@using Models
@using System.Net
@inject NavigationManager NavigationManager

<PageTitle>Atria</PageTitle>

<div class="container-xxl">
    <div class="searchbar position-relative mb-3 mt-4">
        <div class="mb-2">
            <div class="form-control form-control-lg border p-0" style="box-shadow: rgba(0, 0, 0, 0.24) 0 3px 8px; border-radius: 0.375rem">
                <div class="input-group input-group-lg">
                    <button class="btn btn-sm btn-link text-dark" @onclick="Search">
                        <i class="fa fa-search"></i>
                    </button>
                    <input type="search" class="form-control form-control-lg border-0" placeholder="Suche nach..." @bind-value="Query" @onkeyup="SearchInput">
                </div>
            </div>
        </div>

    </div>
    <div class="d-flex flex-wrap">
        <div class="nav nav-pills mb-2">
            <div class="nav-item">
                <NavLink href="@Navigate("type", null)" class="nav-link" Match="NavLinkMatch.All">Webservice</NavLink>
            </div>
            <div class="nav-item ms-3">
                <NavLink href="@Navigate("type", "user")" class="nav-link">Nutzer</NavLink>
            </div>
        </div>
        <div class="d-flex mb-2 ms-auto">
            @if (Type is null or "wse") {
                <button class="btn btn-outline-primary" type="button" @onclick="OpenFilterDialog">
                    Filter
                </button>
            }
            
            <div class="dropdown ms-3 d-flex">
                <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    Sortieren nach
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <NavLink href="@Navigate("sort", null)" class="dropdown-item" Match="NavLinkMatch.All">Relevanz</NavLink>
                    <NavLink href="@Navigate("sort", "useCountAsc")" class="dropdown-item">Aufrufzahl aufsteigend</NavLink>
                    <NavLink href="@Navigate("sort", "useCountDesc")" class="dropdown-item">Aufrufzahl absteigend</NavLink>
                    <NavLink href="@Navigate("sort", "reviewAverageAsc")" class="dropdown-item">Bewertungsdurchschnitt aufsteigend</NavLink>
                    <NavLink href="@Navigate("sort", "reviewAverageDesc")" class="dropdown-item">Bewertungsdurchschnitt absteigend</NavLink>
                    <NavLink href="@Navigate("sort", "recencyDesc")" class="dropdown-item">Neueste</NavLink>
                    <NavLink href="@Navigate("sort", "recencyAsc")" class="dropdown-item">Älteste</NavLink>
                </ul>
            </div>
        </div>
    </div>
    <div class="w-100 mt-2 mb-4">
        @switch (Type) {
            case null or "wse":
                <WseSummaryList Entries="@_wseList"></WseSummaryList>
                break;
            case "user":
                <div class="row row-cols-1 row-cols-md-2 g-3">
                    <UserSummaryList Users="@_userList"></UserSummaryList>
                </div>
                break;
            default:
                NavigationManager.NavigateTo(NavigationManager.GetUriWithQueryParameter("type", (string)null!));
                break;
        }
    </div>
</div>

@if (FilterDialogOpen) {
    <Frontend.Pages.Components.FilterModal IsOnline="IsOnline" IsBookmark="IsBookmark" SelectedStarNum="SelectedStarNum" SelectedTagsStr="SelectedTagsStr" OnClose="@OnFilterDialogClose"></Frontend.Pages.Components.FilterModal>
}

@code {

    [Inject]
    private HttpClient HttpClient { get; set; } = default!;

    [Parameter]
    [SupplyParameterFromQuery]
    public string? Sort { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string? Type { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string? Query { get; set; }

    private IEnumerable<WebserviceEntry> _wseList = new List<WebserviceEntry>();
    private IEnumerable<User> _userList = new List<User>();

    [Parameter]
    [SupplyParameterFromQuery]
    public bool? IsOnline { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public bool? IsBookmark { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "minRating")]
    public int? SelectedStarNum { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "tags")]
    public string[]? SelectedTagsStr { get; set; }

    private void SearchInput(KeyboardEventArgs evt) {
        if (evt.Key == "Enter") {
            Search();
        }
    }

    private void Search() {
        NavigationManager.NavigateTo(Navigate("query", Query));
    }

    protected override async Task OnParametersSetAsync() {
        await base.OnParametersSetAsync();
        switch (Type) {
            case "wse":
            case null:
                await GetAndSetWseList();
                break;
            case "user":
                await GetAndSetUserList();
                break;
            default:
                Navigate("type", null);
                break;
        }
    }

    private async Task GetAndSetWseList() {
        var response = await HttpClient.GetAsync("search/wse" + NavigationManager.ToBaseRelativePath(NavigationManager.Uri));
        _wseList = await response.Content.ReadFromJsonAsync<IEnumerable<WebserviceEntry>>() ?? Array.Empty<WebserviceEntry>();
    }

    private async Task GetAndSetUserList() {
        var response = await HttpClient.GetAsync("search/user" + NavigationManager.ToBaseRelativePath(NavigationManager.Uri));
        if (response.IsSuccessStatusCode) {
            _userList = await response.Content.ReadFromJsonAsync<IEnumerable<User>>() ?? Array.Empty<User>();
        } else if (response.StatusCode == HttpStatusCode.BadRequest) {
            _userList = Array.Empty<User>();
        } else {
            NavigationManager.NavigateTo("/internal-server-error");
        }
    }

    private string Navigate(string key, string? value) {
        return NavigationManager.GetUriWithQueryParameter(key, value);
    }

        @*for tag modal*@
    private bool FilterDialogOpen { get; set; }

    private void OnFilterDialogClose(bool accepted) {
        FilterDialogOpen = false;
    }

    private void OpenFilterDialog() {
        FilterDialogOpen = true;
    }

}
