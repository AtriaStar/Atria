@page "/newWse"
@using Microsoft.AspNetCore.Components
@using Models
@using System.Net
@inject NavigationManager NavManager
@inject HttpClient HttpClient
@inject IJSRuntime Js

<PageTitle>Atria - Neuer Eintrag</PageTitle>

<div class="container-lg mt-3">

    @if (newWse)
    {
        <h2>Neuer Eintrag</h2>
    } else if (editWse) 
    {
        @*TODO inputs with data*@
        <h2>Eintrag bearbeiten</h2>
    }

    @*TODO: draft only needs name; to publish name, short description and link needed*@
    <EditForm Model="@webserviceEntry">
        <DataAnnotationsValidator/>
        <ValidationSummary/>

        <div class="mt-3 mb-3">
            <label class="form-label fw-bold">
                Name
                <small style="color: red">*Pflicht</small>
            </label>
            <div class="ui-field">
                <InputText class="form-control" id="name" @bind-Value="webserviceEntry.Name"/>
            </div>
            <ValidationMessage For="() => webserviceEntry.Name"></ValidationMessage>
        </div>

        <div class="mb-3">
            <label class="form-label fw-bold">
                Kurzbeschreibung
                <small class="text-muted">(max. 50 Zeichen)</small>
                <small style="color: red">*Pflicht für die Veröffentlichung</small>
            </label>
            <div class="ui-field">
                <InputText class="form-control" id="shortDescription" @bind-Value="webserviceEntry.ShortDescription"/>
            </div>
            <ValidationMessage For="() => webserviceEntry.ShortDescription"></ValidationMessage>
        </div>

        <div class="mb-4">
            <label class="form-label fw-bold">
                Verlinkung
                <small style="color: red">*Pflicht für die Veröffentlichung</small>
            </label>
            <div class="ui-field">
                <InputText class="form-control" type="url" placeholder="http(s)://..." id="link" @bind-Value="webserviceEntry.Link"/>
            </div>
            <ValidationMessage For="() => webserviceEntry.Link"></ValidationMessage>
        </div>

        <hr/>

        <div class="row mt-4">
            <div class="col-auto">
                <label class="form-label fw-bold">
                    Tags
                    <small class="text-muted">(zum Auswählen Strg gedrückt halten)</small>
                </label>
            </div>
            <div class="col-auto pt-1 ms-auto">
                <div class="btn-group">
                    <button class="btn btn-outline-danger btn-small" type="button" @onclick="() => DeleteSelectedTags()">
                        Alle Löschen
                    </button>
                </div>
            </div>
            <div class="col-auto mb-2">
                <div class="form-control form-control-sm border p-0" style="box-shadow: rgba(0, 0, 0, 0.24) 3px 3px 3px">
                    <div class="input-group input-group-sm">
                        <button class="btn btn-sm btn-link text-dark"><i class="fa fa-search"></i></button>
                        <input type="search" class="form-control form-control-sm border-0" placeholder="Suche nach..." @bind="TagQuery" @onkeyup="SearchTags">
                    </div>
                </div>
            </div>
        </div>
        
        <div class="row mb-1">
            @foreach (Tag tag in SelectedTags)
            {
                <div class="col-auto">
                    <h6>
                        <span class="badge bg-info">
                            @tag.Name
                            <button type="button" class="btn-close btn-close-white" aria-label="Close" @onclick="() => RemoveTag(tag)"/>
                        </span>
                    </h6>
                </div>
            }
        </div>
        
        <div class="ui-field">
            <select class="form-select mb-3" size="8" multiple @onchange="SelectedTagsChanged">
                @foreach (Tag tag in SearchedTags) {
                    <option value="@tag.Name">@tag.Name</option>
                }
            </select>
        </div>

        <div class="mb-4">
            <label class="form-label fw-bold">
                neue Tags erstellen
                <small class="text-muted">(kommagetrennt)</small>
            </label>
            <div class="ui-field">
                <InputTextArea class="form-control" rows="3" placeholder="tag1,tag2,..." id="newTags" @bind-Value="NewTags"/>
            </div>
        </div>

        <hr/>

        <div class="mt-4 mb-3">
            <label class="form-label fw-bold">Dokumentation</label>
            <div class="ui-field">
                <InputText class="form-control mb-2" type="url" placeholder="Link" id="docLink" @bind-Value="webserviceEntry.DocumentationLink"/> 
            </div>
            <div class="ui-field">
                <InputTextArea class="form-control" rows="3" placeholder="Text" id="doc" @bind-Value="webserviceEntry.Documentation"/>
            </div>
        </div>

        <div class="mb-3">
            <label class="form-label fw-bold">Volltextbeschreibung</label>
            <div class="ui-field">
                <InputTextArea class="form-control" rows="3" id="fullDescription" @bind-Value="webserviceEntry.FullDescription"/>
            </div>
        </div>

        <div class="mb-4">
            <label class="form-label fw-bold">Änderungshistorie</label>
            <div class="ui-field">
                <InputTextArea class="form-control" rows="3" id="changeLog" @bind-Value="webserviceEntry.ChangeLog"/>
            </div>
        </div>

        <div class="d-grid gap-2 d-flex justify-content-end mb-4">
            <div class="btn-group">
                <button class="btn btn-success" type="submit" @onclick="SaveAsDraft">
                    Als Entwurf speichern
                </button>
            </div>
            <div class="btn-group">
                <button class="btn btn-success" type="submit" @onclick="CreateNewWse">
                    Veröffentlichen
                </button>
            </div>
        </div>
    </EditForm>
</div>

@code {
    readonly WebserviceEntry webserviceEntry = new();
    private List<Tag> MockTags = new List<Tag>();
    private List<Tag> SearchedTags = new List<Tag>();
    private List<Tag> SelectedTags = new List<Tag>();
    private List<Tag> NewTags = new List<Tag>();
    private string? TagQuery { get; set; }
    private string? NewTags { get; set; }
    public bool newWse = true;
    public bool editWse = false;

    private string CreateNewMessage { get; set; } = null!;

    private async void SaveAsDraft()
    {

    }

    private async void CreateNewWse()
    {
        
    }

    @*------------TAG SEARCH------------*@
    private void SearchTags(KeyboardEventArgs evt) {
        SearchedTags = new List<Tag> { };

        if (evt.Key == "Enter" && TagQuery is not null) {
            foreach (Tag tag in MockTags)
            {
                if (tag.Name.Contains(TagQuery, StringComparison.CurrentCultureIgnoreCase))
                {
                    SearchedTags.Add(tag);
                }
            }
        }
    }

    @*---------------TAGS---------------*@
    protected override void OnInitialized()
    {
        /*mock tags*/
        MockTags.Add(new() { Name = "Suchmaschine1", CreationTime = DateTimeOffset.Now, UseCount = 1 });
        MockTags.Add(new() { Name = "Lexikon34", CreationTime = DateTimeOffset.Now, UseCount = 34 });
        MockTags.Add(new() { Name = "Wörterbuch6", CreationTime = DateTimeOffset.Now, UseCount = 6 });
        MockTags.Add(new() { Name = "Tool2", CreationTime = DateTimeOffset.Now, UseCount = 2 });
        MockTags.Add(new() { Name = "Webservice2", CreationTime = DateTimeOffset.Now, UseCount = 2 });
        MockTags.Add(new() { Name = "Suchmaschine2", CreationTime = DateTimeOffset.Now, UseCount = 2 });
        MockTags.Add(new() { Name = "Wörterbuch4", CreationTime = DateTimeOffset.Now, UseCount = 4 });
        MockTags.Add(new() { Name = "Tool3", CreationTime = DateTimeOffset.Now, UseCount = 3 });

        SearchedTags = MockTags;
        SearchedTags = SearchedTags.OrderBy(tag => tag.Name).ToList();
    }

    private void DeleteSelectedTags()
    {
        SelectedTags = new List<Tag>();
    }

    private void RemoveTag(Tag tag)
    {
        SelectedTags = SelectedTags.Where(t => t.Name != tag.Name).ToList();
    }

    private void SelectedTagsChanged(ChangeEventArgs e)
    {
        if (e.Value is not null)
        {
            Tag selectedTag = MockTags.Find(t => t.Name == (string)e.Value) ?? throw new ArgumentException("Tag cannot be null");
            SelectedTags.Add(selectedTag);
        }
    }

    /*before call check if NewTags null*/
    private List<Tag> CreateNewTags(string str)
    {
        string[] newTagsStr = str.Split(',');
        foreach (string str in newTagsStr)
        {
            NewTags.Add(new() { Name = str, CreationTime = DateTimeOffset.Now, UseCount = 1 })
        }
        return NewTags;
    }

}