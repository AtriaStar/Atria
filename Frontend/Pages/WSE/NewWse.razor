@page "/newWse"
@using Microsoft.AspNetCore.Components
@using Models
@using Models.DTO
@using System.Net
@inject NavigationManager NavManager
@inject HttpClient HttpClient
@inject IJSRuntime Js

<PageTitle>Atria - Neuer Eintrag</PageTitle>

<div class="container-lg mt-3">

    <h2>Neuer Eintrag</h2>
    
    @*TODO: draft only needs name; to publish name, short description and link needed*@
    <EditForm Model="@_webserviceEntry" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator/>
        <ValidationSummary/>

        <div class="mt-3 mb-3">
            <label class="form-label fw-bold">
                Name
                <small style="color: red">*Pflicht</small>
            </label>
            <div class="ui-field">
                <InputText class="form-control" id="name" @bind-Value="_webserviceEntry.Name"/>
            </div>
            <ValidationMessage For="() => _webserviceEntry.Name"></ValidationMessage>
        </div>

        <div class="mb-3">
            <label class="form-label fw-bold">
                Kurzbeschreibung
                <small class="text-muted">(max. 50 Zeichen)</small>
                <small style="color: red">*Pflicht für die Veröffentlichung</small>
            </label>
            <div class="ui-field">
                <InputText class="form-control" id="shortDescription" @bind-Value="_webserviceEntry.ShortDescription"/>
            </div>
            <ValidationMessage For="() => _webserviceEntry.ShortDescription"></ValidationMessage>
        </div>

        <div class="mb-4">
            <label class="form-label fw-bold">
                Verlinkung
                <small style="color: red">*Pflicht für die Veröffentlichung</small>
            </label>
            <div class="ui-field">
                <InputText class="form-control" type="url" placeholder="http(s)://..." id="link" @bind-Value="_webserviceEntry.Link"/>
            </div>
            <ValidationMessage For="() => _webserviceEntry.Link"></ValidationMessage>
        </div>

        <hr/>

        <div class="row mt-4">
            <div class="col-auto">
                <label class="form-label fw-bold">
                    Tags
                    <small class="text-muted">(zum Auswählen Strg gedrückt halten)</small>
                </label>
            </div>
            <div class="col-auto pt-1 ms-auto">
                <div class="btn-group">
                    <button class="btn btn-outline-danger btn-small" type="button" @onclick="() => DeleteSelectedTags()">
                        Alle Löschen
                    </button>
                </div>
            </div>
            <div class="col-auto mb-2">
                <div class="form-control form-control-sm border p-0" style="box-shadow: rgba(0, 0, 0, 0.24) 3px 3px 3px">
                    <div class="input-group input-group-sm">
                        <button class="btn btn-sm btn-link text-dark"><i class="fa fa-search"></i></button>
                        <input type="search" class="form-control form-control-sm border-0" placeholder="Suche nach..." @bind="TagQuery" @onkeyup="SearchTags">
                    </div>
                </div>
            </div>
        </div>
        
        <div class="row mb-1">
            @foreach (Tag tag in SelectedTags)
            {
                <div class="col-auto">
                    <h6>
                        <span class="badge bg-info">
                            @tag.Name
                            <button type="button" class="btn-close btn-close-white" aria-label="Close" @onclick="() => RemoveTag(tag)"/>
                        </span>
                    </h6>
                </div>
            }
        </div>
        
        <div class="ui-field">
            <select class="form-select mb-3" size="8" multiple @onchange="SelectedTagsChanged">
                @foreach (Tag tag in SearchedTags) {
                <option value="@tag.Name">@tag.Name</option>
                }
            </select>
        </div>

        <div class="mb-4">
            <label class="form-label fw-bold">
                neue Tags erstellen
                <small class="text-muted">(kommagetrennt)</small>
            </label>
            <div class="ui-field">
                <InputTextArea class="form-control" rows="3" placeholder="tag1,tag2,..." id="newTags" @bind-Value="_tagDto.NewTagsStr"/>
            </div>
            <ValidationMessage For="() => _tagDto.NewTagsStr"></ValidationMessage>
        </div>

        <hr/>

        <div class="mt-4 mb-3">
            <label class="form-label fw-bold">Dokumentation</label>
            <div class="ui-field">
                <InputText class="form-control mb-2" type="url" placeholder="Link" id="docLink" @bind-Value="_webserviceEntry.DocumentationLink"/> 
            </div>
            <div class="ui-field">
                <InputTextArea class="form-control" rows="3" placeholder="Text" id="doc" @bind-Value="_webserviceEntry.Documentation"/>
            </div>
        </div>

        <div class="mb-3">
            <label class="form-label fw-bold">Volltextbeschreibung</label>
            <div class="ui-field">
                <InputTextArea class="form-control" rows="3" id="fullDescription" @bind-Value="_webserviceEntry.FullDescription"/>
            </div>
        </div>

        <div class="mb-4">
            <label class="form-label fw-bold">Änderungshistorie</label>
            <div class="ui-field">
                <InputTextArea class="form-control" rows="3" id="changeLog" @bind-Value="_webserviceEntry.ChangeLog"/>
            </div>
        </div>

        <div class="d-grid gap-2 d-flex justify-content-end mb-4">
            <div class="btn-group">
                <button class="btn btn-success" type="submit" @onclick="() => SaveAsDraft()"> 
                    Als Entwurf speichern
                </button>
            </div>
            <div class="btn-group">
                <button class="btn btn-success" type="submit" @onclick="() => PublishWse()">
                    Veröffentlichen
                </button>
            </div>
        </div>
    </EditForm>
</div>

@code {
    [CascadingParameter] 
    private LoginState LoginState { get; init; } = null!;
    private readonly WebserviceEntry _webserviceEntry = new();
    private readonly TagDto _tagDto = new();

    private List<Tag> SearchedTags = new();
    private List<Tag> SelectedTags = new();
    private string[] SelectedTagsStr = { };
    private Tag[]? AllTags { get; set; }

    private string? TagQuery { get; set; }
    private string ConflictMessage { get; set; } = null!;

    private void HandleValidSubmit() {
        _webserviceEntry.ContactPersonId = LoginState.User!.Id;
        _webserviceEntry.Tags = new HashSet<Tag>(SelectedTags);

	    _webserviceEntry.Tags.UnionWith(_tagDto.NewTagsStr?.Split(',').Select(x => new Tag {Name = x})
	                                    ?? Enumerable.Empty<Tag>());
    }

    private async void PublishWse() {
        HandleValidSubmit();
        var response = await HttpClient.PutAsJsonAsync("wse", _webserviceEntry);

        if (response.IsSuccessStatusCode) {
            long WseId = (await response.Content.ReadFromJsonAsync<WebserviceEntry>()).Id;
            NavManager.NavigateTo("wse/" + WseId);
        }
        else if (response.StatusCode == HttpStatusCode.Conflict) {
            /*TODO specify message*/
            ConflictMessage = "There was an conflict";
            StateHasChanged();
        }
        else {
            NavManager.NavigateTo("/internal-server-error");
        }
    }

    private async void SaveAsDraft() {
        HandleValidSubmit();

        WseDraft _wseDraft = new()
        {
            Name = _webserviceEntry.Name,
            ShortDescription = _webserviceEntry.ShortDescription,
            Link = _webserviceEntry.Link,
            FullDescription = _webserviceEntry.FullDescription,
            DocumentationLink = _webserviceEntry.DocumentationLink,
            Documentation = _webserviceEntry.Documentation,
            ChangeLog = _webserviceEntry.ChangeLog,
            Tags = _webserviceEntry.Tags
        };

        var response = await HttpClient.PutAsJsonAsync("user/draft", _wseDraft);

        if (response.IsSuccessStatusCode) {
            NavManager.NavigateTo("wseDraft");
        }
        else if (response.StatusCode == HttpStatusCode.Conflict) {
            /*TODO specify message*/
            ConflictMessage = "There was an conflict";
            StateHasChanged();
        }
        else {
            NavManager.NavigateTo("/internal-server-error");
        }
    }

    @*------------TAG SEARCH------------*@
    private void SearchTags(KeyboardEventArgs evt) {
        SearchedTags = new List<Tag>();

        if (evt.Key == "Enter" && TagQuery is not null && AllTags is not null) {
            foreach (Tag tag in AllTags)
            {
                if (tag.Name.Contains(TagQuery, StringComparison.CurrentCultureIgnoreCase))
                {
                    SearchedTags.Add(tag);
                }
            }
        }
    }

    @*---------------TAGS---------------*@
    protected override async Task OnInitializedAsync()
    {
        AllTags = await HttpClient.GetFromJsonAsync<Tag[]>("tag") ?? new Tag[] {};
        SearchedTags = AllTags.ToList();
    }

    private void DeleteSelectedTags()
    {
        SelectedTags = new List<Tag>();
    }

    private void RemoveTag(Tag tag)
    {
        SelectedTags = SelectedTags.Where(t => t.Name != tag.Name).ToList();
    }

    private void SelectedTagsChanged(ChangeEventArgs e)
    {
        if (e.Value is not null)
        {
            SelectedTagsStr = (string[])e.Value;
        }

        foreach (string str in SelectedTagsStr)
        {
            if (!SelectedTags.Exists(t => t.Name == str) && AllTags is not null) {
                Tag selectedTag = Array.Find(AllTags, t => t.Name == str) ?? throw new ArgumentException("Tag cannot be null");
                SelectedTags.Add(selectedTag);
            }
        }
    }

}