@page "/newWse"
@using Microsoft.AspNetCore.Components
@using Models

<PageTitle>Atria - Neuer Eintrag</PageTitle>

<div class="container-lg mt-3">

    @if (newWse)
    {
        <h2>Neuer Eintrag</h2>
    } else if (editWse) 
    {
        @*TODO inputs with data*@
        <h2>Eintrag bearbeiten</h2>
    }

    @*TODO: draft only needs name; to publish name, short description and link needed*@
    <EditForm Model="@webserviceEntry" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator/>
        <ValidationSummary/>

        <div class="mt-3 mb-3">
            <label class="form-label fw-bold">
                Name
                <small style="color: red">*Pflicht</small>
            </label>
            <div class="ui-field">
                <InputText class="form-control" id="name" @bind-Value="webserviceEntry.Name"/>
            </div>
            <ValidationMessage For="() => webserviceEntry.Name"></ValidationMessage>
        </div>

        <div class="mb-3">
            <label class="form-label fw-bold">
                Kurzbeschreibung
                <small class="text-muted">(max. 50 Zeichen)</small>
                <small style="color: red">*Pflicht für die Veröffentlichung</small>
            </label>
            <div class="ui-field">
                <InputText class="form-control" id="shortDescription" @bind-Value="webserviceEntry.ShortDescription"/>
            </div>
            <ValidationMessage For="() => webserviceEntry.ShortDescription"></ValidationMessage>
        </div>

        <div class="mb-4">
            <label class="form-label fw-bold">
                Verlinkung
                <small style="color: red">*Pflicht für die Veröffentlichung</small>
            </label>
            <div class="ui-field">
                <InputText class="form-control" type="url" placeholder="http(s)://..." id="link" @bind-Value="webserviceEntry.Link"/>
            </div>
            <ValidationMessage For="() => webserviceEntry.Link"></ValidationMessage>
        </div>

        <hr/>

        <div class="row mt-4">
            <div class="col-auto">
                <label class="form-label fw-bold">
                    Tags
                    <small class="text-muted">(zum Auswählen Strg gedrückt halten)</small>
                </label>
            </div>
            <div class="col-auto pt-1 ms-auto">
                <div class="btn-group">
                    <button class="btn btn-outline-danger btn-small" type="button" @onclick="() => deleteSelectedTags()">
                        Alle Löschen
                    </button>
                </div>
            </div>
            <div class="col-auto mb-2">
                <div class="form-control form-control-sm border p-0" style="box-shadow: rgba(0, 0, 0, 0.24) 3px 3px 3px">
                    <div class="input-group input-group-sm">
                        <button class="btn btn-sm btn-link text-dark"><i class="fa fa-search"></i></button>
                        <input type="search" class="form-control form-control-sm border-0" placeholder="Suche nach...">
                    </div>
                </div>
            </div>
        </div>
        
        <div class="row mb-1">
            @foreach (string tag in selectedTags)
            {
                <div class="col-auto">
                    <h6>
                        <span class="badge bg-info">
                            @tag
                            <button type="button" class="btn-close btn-close-white" aria-label="Close" @onclick="() => removeTag(tag)"/>
                        </span>
                    </h6>
                </div>
            }
        </div>
        
        @*TODO change to InputSelect*@
        <div class="ui-field">
            <select class="form-select mb-3" size="8" multiple @onchange="SelectedTagsChanged">
                @for (int i = 0; i < 21; i++) {
                    <option value="Tag @i">Tag @i</option>
                }
            </select>
        </div>

        <div class="mb-4">
            <label class="form-label fw-bold">
                neue Tags erstellen
                <small class="text-muted">(kommagetrennt)</small>
            </label>
            <div class="ui-field">
                <InputTextArea class="form-control" rows="3" placeholder="tag1,tag2,..." id="newTags"/>
            </div>
        </div>

        <hr/>

        <div class="mt-4 mb-3">
            <label class="form-label fw-bold">Dokumentation</label>
            <div class="ui-field">
                <InputText class="form-control mb-2" type="url" placeholder="Link" id="docLink" @bind-Value="webserviceEntry.DocumentationLink"/> 
            </div>
            <div class="ui-field">
                <InputTextArea class="form-control" rows="3" placeholder="Text" id="doc" @bind-Value="webserviceEntry.Documentation"/>
            </div>
        </div>

        <div class="mb-3">
            <label class="form-label fw-bold">Volltextbeschreibung</label>
            <div class="ui-field">
                <InputTextArea class="form-control" rows="3" id="fullDescription" @bind-Value="webserviceEntry.FullDescription"/>
            </div>
        </div>

        <div class="mb-4">
            <label class="form-label fw-bold">Änderungshistorie</label>
            <div class="ui-field">
                <InputTextArea class="form-control" rows="3" id="changeLog" @bind-Value="webserviceEntry.ChangeLog"/>
            </div>
        </div>

        <div class="d-grid gap-2 d-flex justify-content-end mb-4">
            <div class="btn-group">
                <button class="btn btn-success" type="submit">
                    Als Entwurf speichern
                </button>
            </div>
            <div class="btn-group">
                <button class="btn btn-success" type="submit">
                    Veröffentlichen
                </button>
            </div>
        </div>
    </EditForm>
</div>

@code {
    readonly WebserviceEntry webserviceEntry = new();
    string[] selectedTags = new string[] { };
    public bool newWse = true;
    public bool editWse = false;

    private void HandleValidSubmit() {
        Console.WriteLine("Valid");
    }

    private void deleteSelectedTags()
    {
        selectedTags = Array.Empty<string>();
    }

    private void removeTag(string tag)
    {
        selectedTags = selectedTags.Where(w => w != tag).ToArray();
    }

    private void SelectedTagsChanged(ChangeEventArgs e)
    {
        if (e.Value is not null)
        {
            selectedTags = (string[])e.Value;
        }
    }
}