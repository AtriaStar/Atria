@page "/wse/{WseId:long}/{WseName?}"
@using Models
@using System.Net
@using System.Web
@using Frontend.Pages.WSE.Components
@using Frontend.Pages.WSE.Components.FilterModal

@inject NavigationManager NavManager

<PageTitle>Atria - @_wse?.Name</PageTitle>

<div class="container-xxl mt-4">

@if (_conflictMessage != null) {
    <div class="text-center fw-bold text-danger">
        @_conflictMessage
    </div>
}

@if (_wse is not null) {
@*------------HEADER CARD------------*@
    <div class="card mb-4">
        <div class="card-body">
            <div class="row mb-2">
                <div class="col-auto mt-sm-1">
                    <i class="fa-solid fa-circle @_onlineStatus"></i>
                </div>
                <div class="col ps-0">
                    <h3 class="card-title fw-bold">
                        @if (!_displayEditForm) {
                            @_wse.Name
                        } else {
                            <EditForm Model="_wse" OnValidSubmit="HandleValidSubmit">
                                <DataAnnotationsValidator></DataAnnotationsValidator>
                                <InputText @bind-Value="_wse.Name" id="name" type="text" class="form-control" placeholder="Name"></InputText>
                                <ValidationSummary></ValidationSummary>
                            </EditForm>
                        }
                    </h3>
                </div>
                <div class="col-auto">
                    <div class="d-flex align-items-center">
                        @{
                            var bookmarkTitle = _isBookmark ? "Lesezeichen entfernen" : "Als Lesezeichen hinzufügen";
                            var bookmarkStyle = _isBookmark ? "fa-solid" : "fa-regular";
                        }
                        <i class="fa-bookmark @bookmarkStyle fs-4 mx-4" type="button" title="@bookmarkTitle" style="color: #dc3545" @onclick="ChangeBookmarkStatus"></i>
                        <a class="fa-solid fa-arrow-up-right-from-square text-decoration-none fs-2" title="Zum Webservice" href="@_wse.Link"></a>
                    </div>
                </div>
            </div>
            <h5 class="card-subtitle mb-2 me-2 text-muted">
                @_contactPerson!.FirstNames @_contactPerson.LastName
                <CollabModal WseId="WseId" WseContactPersonId="_wse.ContactPersonId"></CollabModal>
            </h5>
            @if (!_displayEditForm) {
                <div class="card-text">@_wse.ShortDescription</div>
            } else {
                <EditForm Model="_wse" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator></DataAnnotationsValidator>
                    <InputText @bind-Value="_wse.ShortDescription" id="shortDescription" type="text" class="form-control" placeholder="Kurztextbeschreibung"></InputText>
                    <ValidationSummary></ValidationSummary>
                </EditForm>
            }

        </div>
    </div>

    @if (_displayEditForm) {
        <div class="col-auto mt-sm-1">

            <div class="card mb-4">
                <h6 class="card-header fw-bold">Link</h6>
                <div class="card-body">
                    <EditForm Model="_wse" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator></DataAnnotationsValidator>
                        <InputText @bind-Value="_wse.Link" id="link" type="text" class="form-control" placeholder="Link"></InputText>
                        <ValidationSummary></ValidationSummary>
                    </EditForm>
                </div>
            </div>
        </div>
    }

    <div class="row mb-4">
        @*------------REVIEW AND TAGS------------*@
        <div class="col-md-3 mb-4">
            @if (!_displayEditForm) {
                <div class="card mb-4">
                    <div class="card-body">
                        <h6 class="card-title fw-bold">Bewertung</h6>
                        <div class="row">
                            <div class="col-auto">
                                <Rating ReviewAverage="@_avgReview"/>
                            </div>
                            <div class="col-auto">
                                <p>@_reviewNum Bewertung(en)</p>
                            </div>
                        </div>
                    </div>
                </div>
            }

            <div class="card">
                <div class="card-body">
                    <h6 class="card-title fw-bold">Tags</h6>
                    <div class="card-text">
                        @if (!_displayEditForm) {
                            foreach (var tag in _wse.Tags) {
                                <div class="badge bg-info me-1" value="@tag.Name">@tag.Name</div>
                            }
                        } else {
                            <TagList @bind-SelectedTags="_wse.Tags"></TagList>
                        }
                    </div>
                </div>
            </div>
        </div>

        @*------------LOG, DOC, DESC.------------*@
        <div class="col-md-9">

            <div class="card mb-4">
                <h6 class="card-header fw-bold">Änderungshistorie</h6>
                <div class="card-body">
                    @if (!_displayEditForm) {
                        @_wse.ChangeLog
                    } else {
                        <EditForm Model="_wse" OnValidSubmit="HandleValidSubmit">
                            <DataAnnotationsValidator></DataAnnotationsValidator>
                            <InputTextArea @bind-Value="_wse.ChangeLog" id="changeLog" type="text" class="form-control" placeholder="Änderungshistorie"></InputTextArea>
                            <ValidationSummary></ValidationSummary>
                        </EditForm>
                    }
                </div>
            </div>

            <div class="card mb-4">
                <h6 class="card-header fw-bold">
                    Dokumentation
                    <a class="fa-solid fa-arrow-up-right-from-square text-decoration-none fs-5 ms-1" title="Zur Dokumetation" href="@_wse.DocumentationLink"></a>
                </h6>
                <div class="card-body">
                    @if (!_displayEditForm) {
                        <div class="card-text">@_wse.Documentation</div>
                    } else {
                        <EditForm Model="_wse" OnValidSubmit="HandleValidSubmit">
                            <DataAnnotationsValidator></DataAnnotationsValidator>
                            <InputTextArea @bind-Value="_wse.Documentation" id="documentation" type="text" class="form-control" placeholder="Dokumentation"></InputTextArea>
                            <ValidationSummary></ValidationSummary>
                        </EditForm>
                    }
                </div>
            </div>

            @if (_displayEditForm) {
                <div class="col-auto mt-sm-1">
                    <div class="card mb-4">
                        <h6 class="card-header fw-bold">Dokumentations-Link</h6>
                        <div class="card-body">
                            <EditForm Model="_wse" OnValidSubmit="HandleValidSubmit">
                                <DataAnnotationsValidator></DataAnnotationsValidator>
                                <InputText @bind-Value="_wse.DocumentationLink" id="documentationLink" type="text" class="form-control" placeholder="Dokumentations-Link"></InputText>
                                <ValidationSummary></ValidationSummary>
                            </EditForm>
                        </div>
                    </div>
                </div>
            }

            <div class="card">
                <h6 class="card-header fw-bold">Volltextbeschreibung</h6>
                <div class="card-body">
                    @if (!_displayEditForm) {
                        <div class="card-text">@_wse.FullDescription</div>
                    } else {
                        <EditForm Model="_wse" OnValidSubmit="HandleValidSubmit">
                            <DataAnnotationsValidator></DataAnnotationsValidator>
                            <InputTextArea @bind-Value="_wse.FullDescription" id="fullDescription" type="text" class="form-control" placeholder="Volltextbeschreibung"></InputTextArea>
                            <ValidationSummary></ValidationSummary>
                        </EditForm>
                    }
                </div>
            </div>
        </div>
    </div>

    @if (!_displayEditForm) {
        <hr/>

        <h6 class="fw-bold mt-2 mb-2">Q&A</h6>
        <AuthView>
            <Authorized>
                <div class="ui-field">
                    <textarea class="form-control mt-4 mb-3" type="text" placeholder="Haben Sie eine Frage?" @bind="_newQuestion"></textarea>
                </div>
                <div class="d-grid gap-2 mt-2 mb-4 d-flex justify-content-end">
                    <button class="btn btn-outline-success btn-small" type="button" @onclick="SubmitNewQuestion">
                        Speichern
                    </button>
                </div>
            </Authorized>
        </AuthView>

        @foreach (var question in _wseQuestions) {
            <QuestionComponent Question="question" WseId="WseId"/>
        }

        @if (_wseNextQuestions.Length != 0) {
            <div class="d-grid d-flex mt-2 mb-4 justify-content-center">
                <button class="btn btn-outline-secondary btn-small" type="button" @onclick="GetNextQuestions">weitere Fragen</button>
            </div>
        }

        <hr/>

        @*------------REVIEWS------------*@
        <div class="row mb-4">
            <div class="col-auto">
                <h6 class="fw-bold">Bewertungen</h6>
            </div>
            <AuthView>
                <Authorized>
                    <div class="col-auto">
                        <button class="btn btn-outline-success btn-small" type="button" @onclick="CreateNewReview">neue Bewertung</button>
                    </div>
                </Authorized>
            </AuthView>

        </div>

        @foreach (var review in _wseReviews) {
            <ReviewComponent Review="review"/>
        }
        @if (_wseNextReviews.Length != 0) {
            <div class="d-grid d-flex mt-2 mb-2 justify-content-center">
                <button class="btn btn-outline-secondary btn-small" type="button" @onclick="GetNextReviews">weitere Bewertungen</button>
            </div>
        }
    }

    @if (_isCollab) {
        @if (!_displayEditForm) {
            <div class="d-grid gap-2 mt-4 mb-4 d-flex justify-content-end">
                <button class="btn btn-success" type="button" @onclick="() => _displayEditForm = !_displayEditForm">
                    Bearbeiten
                </button>

                <DeleteModal ModalBody="Sind Sie sicher, dass Sie diesen Eintrag löschen möchten?"
                             ToDelete="wse" WseId="WseId" ModalTitle="Wse löschen" ButtonStyle="btn-danger">
                </DeleteModal>
            </div>
        } else {
            <EditForm Model="_wse">
                <DataAnnotationsValidator/>
                <ValidationSummary/>
                <div class="d-grid gap-2 mt-4 mb-4 d-flex justify-content-end">
                    <button class="btn btn-danger" type="button" @onclick="CancelEdit">
                        Abbrechen
                    </button>
                    <button class="btn btn-success" type="submit" @onclick="HandleValidSubmit">
                        Speichern
                    </button>
                </div>
            </EditForm>
        }
    }
} else if (_wseNotFound) {
    <NotFound></NotFound>
} else {
    <div class="d-flex justify-content-center mt-4">
        <p>
            <strong>Webservice-Eintrag wird geladen...</strong>
        </p>
        <div class="spinner-border ms-3" role="status" aria-hidden="true"></div>
    </div>
}
</div>

@code {

    [Parameter]
    public long WseId { get; set; }

    [Parameter]
    public string WseName { get; set; } = null!;
    
    [Inject]
    private HttpClient HttpClient { get; set; } = default!;

    private WebserviceEntry? _wse;

    [CascadingParameter]
    public LoginState LoginState { get; init; } = default!;

    private User? _contactPerson;

    private WebserviceEntry[]? CurrentUserWse { get; set; }
    private WebserviceEntry[]? CurrentUserBookmarks { get; set; }

    private string? _newQuestion;

    private int _reviewNum;
    private int _reviewPage = 1;
    private readonly int _reviewEntryNum = 3;
    private Review[] _wseReviews = { };
    private Review[] _wseNextReviews = { };
    private Review[] _allReviews = { };

    private int _questionPage = 1;
    private readonly int _questionEntryNum = 3;
    private Question[] _wseQuestions = { };
    private Question[] _wseNextQuestions = { };

    private bool _isCollab;
    private bool _isBookmark;
    private bool _displayEditForm;
    private double _avgReview;
    private string? _onlineStatus;
    private bool _wseNotFound;

    private string? _conflictMessage;

    private async void HandleValidSubmit() {
        var response = await HttpClient.PostAsJsonAsync("wse", _wse);

        if (response.IsSuccessStatusCode) {
            NavManager.NavigateTo("wse/" + WseId, true);
        } else if (response.StatusCode == HttpStatusCode.Conflict) {
            _conflictMessage = await response.Content.ReadAsStringAsync();
            StateHasChanged();
        } else {
            NavManager.NavigateTo("/internal-server-error");
        }
    }

    private void CancelEdit() {
        NavManager.NavigateTo("wse/" + WseId, true);
    }

    protected override async Task OnInitializedAsync() {
        var response = await HttpClient.GetAsync($"wse/{WseId}");
        if (response.IsSuccessStatusCode) {
            _wse = (await response.Content.ReadFromJsonAsync<WebserviceEntry>())!;
            var fullUrl = $"wse/{WseId}/{HttpUtility.UrlEncode(_wse.Name)}";
            

            _contactPerson = await HttpClient.GetFromJsonAsync<User>("user/" + _wse!.ContactPersonId) ?? new User();

            _allReviews = await HttpClient.GetFromJsonAsync<Review[]>("wse/" + WseId + "/review?page=" + 1 + "&entriesPerPage=" + 1000) ?? new Review[] { };
            _reviewNum = _allReviews.Count();

            await StyleOnlineStatus();
            await CheckCurrentUserCollab();
            await CheckCurrentUserBookmark();
            await InitReviews();
            await InitQuestions();
            GetAvgReview();
            
            if (NavManager.ToBaseRelativePath(NavManager.Uri) != fullUrl) {
                NavManager.NavigateTo(fullUrl);
            }
        } else {
            _wseNotFound = true;
        }
    }

    private void GetAvgReview() {
        double sum = 0;
        foreach (var review in _allReviews) {
            sum += (int)review.StarCount;
        }
        _avgReview = sum / _reviewNum;
    }

    private async Task InitReviews() {
        _wseReviews = await HttpClient.GetFromJsonAsync<Review[]>("wse/" + WseId + "/review?page=" + _reviewPage + "&entriesPerPage=" + _reviewEntryNum) ?? new Review[] { };
        _reviewPage++;
        _wseNextReviews = await HttpClient.GetFromJsonAsync<Review[]>("wse/" + WseId + "/review?page=" + _reviewPage + "&entriesPerPage=" + _reviewEntryNum) ?? new Review[] { };
        _reviewPage++;
        _wseReviews = _wseReviews.OrderByDescending(r => (int)r.StarCount).ToArray();
    }

    private async Task InitQuestions() {
        _wseQuestions = await HttpClient.GetFromJsonAsync<Question[]>("wse/" + WseId + "/question?page=" + _questionPage + "&entriesPerPage=" + _questionEntryNum) ?? new Question[] { };
        _questionPage++;
        _wseNextQuestions = await HttpClient.GetFromJsonAsync<Question[]>("wse/" + WseId + "/question?page=" + _questionPage + "&entriesPerPage=" + _questionEntryNum) ?? new Question[] { };
        _questionPage++;
    }

    private async Task GetNextReviews() {
        var loadedReviews = new Review[_wseReviews.Length + _wseNextReviews.Length];
        _wseReviews.CopyTo(loadedReviews, 0);
        _wseNextReviews.CopyTo(loadedReviews, _wseReviews.Length);
        _wseReviews = loadedReviews;

        _wseNextReviews = await HttpClient.GetFromJsonAsync<Review[]>("wse/" + WseId + "/review?page=" + _reviewPage + "&entriesPerPage=" + _reviewEntryNum) ?? new Review[] { };
        _reviewPage++;
    }

    private async Task GetNextQuestions() {
        var loadedQuestions = new Question[_wseQuestions.Length + _wseNextQuestions.Length];
        _wseQuestions.CopyTo(loadedQuestions, 0);
        _wseNextQuestions.CopyTo(loadedQuestions, _wseQuestions.Length);
        _wseQuestions = loadedQuestions;

        _wseNextQuestions = await HttpClient.GetFromJsonAsync<Question[]>("wse/" + WseId + "/question?page=" + _questionPage + "&entriesPerPage=" + _questionEntryNum) ?? new Question[] { };
        _questionPage++;
    }

    private async Task CheckCurrentUserCollab() {
        if (LoginState.LoggedIn) {
            CurrentUserWse = await HttpClient.GetFromJsonAsync<WebserviceEntry[]>("user/" + LoginState.User.Id + "/wse");
            if (CurrentUserWse!.Any(userWse => userWse.Id == WseId)) {
                _isCollab = true;
            }
        }
    }

    private async Task CheckCurrentUserBookmark() {
        if (LoginState.LoggedIn) {
            CurrentUserBookmarks = await HttpClient.GetFromJsonAsync<WebserviceEntry[]>("user/" + LoginState.User.Id + "/bookmarks");
            if (CurrentUserBookmarks!.Any(userBm => userBm.Id == WseId)) {
                _isBookmark = true;
            }
        }
    }

    private async void ChangeBookmarkStatus() {
        if (LoginState.LoggedIn) {
            _isBookmark = !_isBookmark;
            if (!_isBookmark) {
                await HttpClient.PostAsJsonAsync("user/" + LoginState.User.Id + "/bookmarks/add/" + WseId, "");
            } else {
                await HttpClient.PostAsJsonAsync("user/" + LoginState.User.Id + "/bookmarks/remove/" + WseId, "");
            }
        } else {
            NavManager.NavigateTo("login");
        }
    }

    private async void SubmitNewQuestion() {
        if (_newQuestion != null && LoginState.LoggedIn) {
            var response = await HttpClient.PutAsJsonAsync("wse/question", new Question {
                WseId = WseId,
                Text = _newQuestion,
                CreationTime = DateTimeOffset.UtcNow,
                CreatorId = LoginState.User.Id
            });

            if (response.IsSuccessStatusCode) {
                NavManager.NavigateTo("wse/" + WseId, true);
            } else if (response.StatusCode == HttpStatusCode.Conflict) {
                _conflictMessage = await response.Content.ReadAsStringAsync();
                StateHasChanged();
            } else {
                NavManager.NavigateTo("/internal-server-error");
            }
        } else {
            NavManager.NavigateTo("login");
        }
    }

    private void CreateNewReview() {
        if (LoginState.LoggedIn) {
            NavManager.NavigateTo("/wse/" + WseId + "/editReview");
        } else {
            NavManager.NavigateTo("login");
        }
    }

    private async Task StyleOnlineStatus() {
        var response = await HttpClient.GetAsync($"wse/{WseId}/checks/latest");
        if (response.StatusCode == HttpStatusCode.OK) {
            if (await response.Content.ReadFromJsonAsync<bool>()) {
                _onlineStatus = "text-success";
            }
            _onlineStatus = "text-danger";
        } else {
            _onlineStatus = "text-secondary";
        }
    }

}
