@page "/wse/{WseId:long}/{WseName?}"
@using Models
@using System.Web
@using System.Net

<PageTitle>Atria - @_wse.Name</PageTitle>

<div class="container-xxl mt-4">

    @if (_isCollab)
    {
        @if (!_displayEditForm)
        {
            <div class="d-grid gap-2 mt-4 mb-4 d-flex justify-content-end">
                <button class="btn btn-success" type="button" @onclick="() => _displayEditForm = !_displayEditForm">
                    Bearbeiten
                </button>
                <button class="btn btn-danger" type="button" @onclick="OpenDeleteWseDialog">
                    Löschen
                </button>
            </div>
        }
        else
        {
            <EditForm Model="_wse">
                <DataAnnotationsValidator/>
                <ValidationSummary/>
                <div class="d-grid gap-2 mt-4 mb-4 d-flex justify-content-end">
                    <button class="btn btn-danger" type="button" @onclick="CancelEdit">
                        Abbrechen
                    </button>
                    <button class="btn btn-success" type="submit" @onclick="HandleValidSubmit">
                        Speichern
                    </button>
                </div>
            </EditForm>
        }
    }

    @*------------HEADER CARD------------*@
    <div class="card mb-4">
        <div class="card-body">
            <div class="row mb-2">
                <div class="col-auto mt-sm-1">
                    <i class="fa-solid fa-circle text-success" />
                </div>
                <div class="col ps-0">
                    <h3 class="card-title fw-bold">
                        @if (!_displayEditForm)
                        {
                            @_wse.Name
                        }
                        else
                        {
                            <EditForm Model="_wse" OnValidSubmit="HandleValidSubmit">
                                <DataAnnotationsValidator></DataAnnotationsValidator>
                                <InputText @bind-Value="_wse.Name" id="name" type="text" class="form-control" placeholder="Name"></InputText>
                                <ValidationSummary></ValidationSummary>
                            </EditForm>
                        }
                    </h3>
                </div>
                @if (!_displayEditForm)
                {
                    <div class="col-auto d-flex align-content-end me-1">
                        @{
                            var bookmarkState = _isBookmark ? "bi-bookmark-fill" : "bi-bookmark";
                            var bookmarkTitle = _isBookmark ? "Lesezeichen entfernen" : "Als Lesezeichen hinzufügen";
                        }
                        <i class="bi @bookmarkState fs-4" type="button" title="@bookmarkTitle" style="color: #dc3545" @onclick="ChangeBookmarkStatus"></i>
                    </div>
                    <div class="col-auto d-flex align-content-end">
                        <a class="fa-solid fa-arrow-up-right-from-square text-decoration-none fs-2" title="Zur Webservice" href="@_wse.Link" />
                    </div>
                }
            </div>
            <h5 class="card-subtitle mb-2 me-2 text-muted">
                Ansprechpartner
                <button class="btn btn-outline-secondary btn-small ms-2" @onclick="OpenCollabDialog">weitere Kollaboratoren</button>
            </h5>
            @if (!_displayEditForm)
            {
                <div class="card-text">@_wse.ShortDescription</div>
            }
            else
            {
                <EditForm Model="_wse" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator></DataAnnotationsValidator>
                    <InputText @bind-Value="_wse.ShortDescription" id="shortDescription" type="text" class="form-control" placeholder="Kurztextbeschreibung"></InputText>
                    <ValidationSummary></ValidationSummary>
                </EditForm>
            }

        </div>
    </div>

    @if (_displayEditForm) {
        <div class="col-auto mt-sm-1">

            <div class="card mb-4">
                <h6 class="card-header fw-bold">Link</h6>
                <div class="card-body">
                    <EditForm Model="_wse" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator></DataAnnotationsValidator>
                        <InputText @bind-Value="_wse.Link" id="link" type="text" class="form-control" placeholder="Link"></InputText>
                        <ValidationSummary></ValidationSummary>
                    </EditForm>
                </div>
            </div>
        </div>
    }

    <div class="row mb-4">
        @*------------REVIEW AND TAGS------------*@
        <div class="col-md-3 mb-4">
            @if (!_displayEditForm)
            {
                <div class="card mb-4">
                    <div class="card-body">
                        <h6 class="card-title fw-bold">Bewertung</h6>
                        <div class="row">
                            <div class="col-auto">
                                <i class="fa fa-star rating-uncolored"/>
                                <i class="fa fa-star rating-uncolored"/>
                                <i class="fa fa-star rating-uncolored"/>
                                <i class="fa fa-star rating-uncolored"/>
                                <i class="fa fa-star rating-uncolored"/>
                            </div>
                            <div class="col-auto">
                                <p>@_wse.Questions.Count() Bewertungen</p>
                            </div>
                        </div>
                        @* TODO scrollspy or leave it out
                            <div class="d-grid d-flex justify-content-end">
                            <button class="btn btn-outline-secondary btn-small" type="button">zu den Bewertungen</button>
                            </div>*@
                    </div>
                </div>
            }

            <div class="card">
                <div class="card-body">
                    <h6 class="card-title fw-bold">Tags</h6>
                    <div class="card-text">
                        @foreach (Tag tag in _wse.Tags) {
                            <div class="badge bg-info me-1" value="@tag.Name">@tag.Name</div>
                        }
                    </div>
                </div>
            </div>
        </div>

        @*------------LOG, DOC, DESC.------------*@
        <div class="col-md-9">

            <div class="card mb-4">
                <h6 class="card-header fw-bold">Änderungshistorie</h6>
                <div class="card-body">
                    @if (!_displayEditForm)
                    {
                        @_wse.ChangeLog
                    }
                    else
                    {
                        <EditForm Model="_wse" OnValidSubmit="HandleValidSubmit">
                            <DataAnnotationsValidator></DataAnnotationsValidator>
                            <InputTextArea @bind-Value="_wse.ChangeLog" id="changeLog" type="text" class="form-control" placeholder="Änderungshistorie"></InputTextArea>
                            <ValidationSummary></ValidationSummary>
                        </EditForm>
                    }
                </div>
            </div>

            <div class="card mb-4">
                <h6 class="card-header fw-bold">
                    Dokumentation
                    <a class="fa-solid fa-arrow-up-right-from-square text-decoration-none fs-5 ms-1" title="Zur Dokumetation" href="@_wse.DocumentationLink" />
                </h6>
                <div class="card-body">
                    @if (!_displayEditForm)
                    {
                        <div class="card-text">@_wse.Documentation</div>
                    }
                    else
                    {
                        <EditForm Model="_wse" OnValidSubmit="HandleValidSubmit">
                            <DataAnnotationsValidator></DataAnnotationsValidator>
                            <InputTextArea @bind-Value="_wse.Documentation" id="documentation" type="text" class="form-control" placeholder="Dokumentation"></InputTextArea>
                            <ValidationSummary></ValidationSummary>
                        </EditForm>
                    }
                </div>
            </div>

            @if (_displayEditForm) {
                <div class="col-auto mt-sm-1">
                    <div class="card mb-4">
                        <h6 class="card-header fw-bold">Dokumentations-Link</h6>
                        <div class="card-body">
                            <EditForm Model="_wse" OnValidSubmit="HandleValidSubmit">
                                <DataAnnotationsValidator></DataAnnotationsValidator>
                                <InputText @bind-Value="_wse.DocumentationLink" id="documentationLink" type="text" class="form-control" placeholder="Dokumentations-Link"></InputText>
                                <ValidationSummary></ValidationSummary>
                            </EditForm>
                        </div>
                    </div>
                </div>
            }

            <div class="card">
                <h6 class="card-header fw-bold">Volltextbeschreibung</h6>
                <div class="card-body">
                    @if (!_displayEditForm)
                    {
                        <div class="card-text">@_wse.FullDescription</div>
                    } else {
                        <EditForm Model="_wse" OnValidSubmit="HandleValidSubmit">
                            <DataAnnotationsValidator></DataAnnotationsValidator>
                            <InputTextArea @bind-Value="_wse.FullDescription" id="fullDescription" type="text" class="form-control" placeholder="Volltextbeschreibung"></InputTextArea>
                            <ValidationSummary></ValidationSummary>
                        </EditForm>
                    }
                </div>
            </div>
        </div>
    </div>

    @if (!_displayEditForm)
    {
        <hr/>

        @*------------QNA------------*@
        <h6 class="fw-bold mt-2 mb-2">Q&A</h6>

        @if (_isLoggedIn) {
            <div class="ui-field">
                <textarea class="form-control mt-4 mb-3" type="text" placeholder="Haben Sie eine Frage?" @bind="NewQuestion"/>
            </div>
            <div class="d-grid gap-2 mt-2 mb-4 d-flex justify-content-end">
                <button class="btn btn-outline-success btn-small" type="button" @onclick="SubmitNewQuestion">
                    Speichern
                </button>
            </div>
        }

        @foreach (Question question in _wseQuestions)
        {
            <div class="accordion mb-4" id="questionAccordion">
                <div class="accordion-item">
                    <div class="accordion-header px-4 py-3 bg-light border-bottom" id="question">
                        <div class="row">
                            <div class="col-auto">
                                <h6 class="fw-bold mt-1">Frage:</h6>
                            </div>
                            <div class="col ms-3">
                                <h6 class="fw-bold mt-1 mb-1">
                                    @question.Creator.FirstNames @question.Creator.LastName
                                    <small class="text-muted">@question.CreationTime</small>
                                </h6>
                                @question.Text
                            </div>
                        </div>
                        <div class="d-grid gap-2 mt-3 mb-2 d-flex justify-content-end">
                            @if (_isLoggedIn)
                            {
                                <button class="btn btn-outline-success btn-small" type="button">
                                    Antworten
                                </button>
                                @if (@question.CreatorId == _userId)
                                {
                                    <button class="btn btn-outline-danger btn-small" type="button" @onclick="() => OpenDeleteQuestionDialog(question.Id)">
                                        Löschen
                                    </button>
                                }
                            }
                            @*TODO if answers exist*@
                            <button class="btn btn-small btn-outline-secondary collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#answerOne" aria-expanded="false" aria-controls="answerOne">
                                Antworten anzeigen
                            </button>
                        </div>
                    </div>

                    @*TODO if answers exist*@
                    <div id="answerOne" class="accordion-collapse collapse" aria-labelledby="question" data-bs-parent="#questionAccordion">
                        <div class="accordion-body">
                            <ul class="list-group list-group-flush py-0">
                                @*TODO foreach answer*@
                                <li class="list-group-item px-0">
                                    <div class="row">
                                        <div class="col-auto">
                                            <h6 class="fw-bold mt-1">Antwort:</h6>
                                        </div>
                                        <div class="col">
                                            <h6 class="fw-bold mt-1 mb-1">
                                                Creator
                                                <small class="text-muted">Date</small>
                                            </h6>
                                            Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua.
                                        </div>
                                    </div>
                                    @*TODO isCreator*@
                                    @if (true)
                                    {
                                        <div class="d-grid mt-2 d-flex justify-content-end">
                                            <button class="btn btn-outline-danger btn-small" type="button"> @* @onclick="() => OpenDeleteAnswerDialog(question.Id, answer.Id)"*@
                                                Löschen
                                            </button>
                                        </div>
                                    }
                                </li>
                            </ul>
                        </div>
                    </div>

                    @*TODO if more answers exists*@
                    @if (true)
                    {
                        <div class="d-grid d-flex mt-4 mb-4 justify-content-center">
                            @*when clicked show 3-5 more answers*@
                            <button class="btn btn-outline-secondary btn-small" type="button">weitere Antworten</button>
                        </div>
                    }
                </div>
            </div>
        }

        @if (_wseNextQuestions.Length != 0) {
            <div class="d-grid d-flex mt-2 mb-4 justify-content-center">
                <button class="btn btn-outline-secondary btn-small" type="button" @onclick="GetNextQuestions">weitere Fragen</button>
            </div>
        }
        
        <hr/>

        @*------------REVIEWS------------*@
        <div class="row mb-2">
            <div class="col-auto">
                <h6 class="fw-bold">Bewertungen</h6>
            </div>
            @if (_isLoggedIn) {
                <div class="col-auto">
                    <button class="btn btn-outline-success btn-small" type="button">neue Bewertung</button>
                </div>
            }
            @if (_wseReviews.Length > 0)
            {
                <div class="col-auto ms-auto">
                    <div class="dropdown">
                        <a class="btn btn-outline-secondary btn-small dropdown-toggle" href="#" role="button" id="dropdownMenuLink" data-bs-toggle="dropdown" aria-expanded="false">
                            Sortieren nach
                        </a>
                        @*TODO sort logic*@
                        <ul class="dropdown-menu dropdown-menu-end">
                            <li>
                                <a class="dropdown-item" href="#">Neuste</a>
                            </li>
                            <li>
                                <a class="dropdown-item" href="#">Älteste</a>
                            </li>
                            <li>
                                <a class="dropdown-item" href="#">Absteigend</a>
                            </li>
                            <li>
                                <a class="dropdown-item" href="#">Aufsteigend</a>
                            </li>
                        </ul>
                    </div>
                </div>
            }
        </div>

        @foreach (Review review in _wseReviews)
        {
            <div class="card mt-3 mb-4">
                <div class="card-body">
                    <div class="row">
                        <div class="col-auto">
                            @for (int i = 1; i <= (int)review.StarCount; i++)
                            {
                               <i class="fa fa-star rating-color"></i>
                            }
                            @for (int i = (int)review.StarCount + 1; i <= 5; i++)
                            {
                               <i class="fa fa-star rating-uncolored"></i>
                            }
                            <div class="card-subtitle mt-1 text-muted">Date</div>
                        </div>
                        <div class="col mt-1">
                            <h6 class="card-title fw-bold">@review.Title</h6>
                            <div class="card-subtitle mb-2 text-muted">@review.Creator.FirstNames @review.Creator.LastName</div>
                            <p class="card-text">@review.Description</p>
                        </div>
                    </div>
                    @if (_isLoggedIn && review.CreatorId == _userId)
                    {
                        <div class="d-grid gap-2 mt-2 d-flex justify-content-end">
                            <button class="btn btn-outline-success btn-small" type="button" href="editReview">
                                Bearbeiten
                            </button>
                            <button class="btn btn-outline-danger btn-small" type="button" @onclick="() => OpenDeleteReviewDialog(review.Id)">
                                Löschen
                            </button>
                        </div>
                    }
                </div>
            </div>
        }
        @if (_wseNextReviews.Length != 0)
        {
            <div class="d-grid d-flex mt-2 mb-2 justify-content-center">
                <button class="btn btn-outline-secondary btn-small" type="button" @onclick="GetNextReviews">weitere Bewertungen</button> 
            </div>
        }
    }

    @if (_isCollab)
    {
        @if (!_displayEditForm)
        {
            <div class="d-grid gap-2 mt-4 mb-4 d-flex justify-content-end">
                <button class="btn btn-success" type="button" @onclick="() => _displayEditForm = !_displayEditForm">
                    Bearbeiten
                </button>
                <button class="btn btn-danger" type="button" @onclick="OpenDeleteWseDialog">
                    Löschen
                </button>
            </div>
        }
        else
        {
            <EditForm Model="_wse">
                <DataAnnotationsValidator/>
                <ValidationSummary/>
                <div class="d-grid gap-2 mt-4 mb-4 d-flex justify-content-end">
                    <button class="btn btn-danger" type="button" @onclick="CancelEdit">
                        Abbrechen
                    </button>
                    <button class="btn btn-success" type="submit" @onclick="HandleValidSubmit">
                        Speichern
                    </button>
                </div>
            </EditForm>
        }
    }
</div>

@if (CollabDialogOpen) {
    <Frontend.Pages.Components.CollabModal 
    WseId="WseId"
    WseContactPersonId="@_wse.ContactPersonId"
    Collabs="@_wse.Collaborators" 
    OnClose="@OnCollabDialogClose"/>
}

@if (DeleteQuestionDialogOpen) {
    <Frontend.Pages.Components.DeleteModal 
    Title="Frage löschen" 
    Text="Sind Sie sicher, dass Sie Ihre Frage löschen möchten?" 
    ToDelete="question" 
    WseId="WseId"
    QuestionId="QuestionIdToDelete" 
    OnClose="@OnDeleteQuestionDialogClose"/>
}

@if (DeleteAnswerDialogOpen) {
    <Frontend.Pages.Components.DeleteModal 
    Title="Antwort löschen" 
    Text="Sind Sie sicher, dass Sie Ihre Antwort löschen möchten?" 
    ToDelete="answer" 
    WseId="WseId"
    QuestionId="QuestionIdToDelete" 
    AnswerId="AnswerIdToDelete"
    OnClose="@OnDeleteAnswerDialogClose"/>
}

@if (DeleteReviewDialogOpen) {
    <Frontend.Pages.Components.DeleteModal 
    Title="Bewertung löschen" 
    Text="Sind Sie sicher, dass Sie Ihre Bewertung löschen möchten?" 
    ToDelete="review" 
    WseId="WseId"
    ReviewId="ReviewIdToDelete"
    OnClose="@OnDeleteReviewDialogClose"/>
}

@if (DeleteWseDialogOpen) {
    <Frontend.Pages.Components.DeleteModal 
    Title="Eintrag löschen" 
    Text="Sind Sie sicher, dass Sie Ihren Eintrag löschen möchten?" 
    ToDelete="wse" 
    WseId="WseId"
    OnClose="@OnDeleteWseDialogClose"/>
}

@code {
	
	[Inject]
	private HttpClient HttpClient { get; set; } = default!;

    /*-------------MODALS-------------*/
    private long QuestionIdToDelete { get; set; }
    private long AnswerIdToDelete { get; set; }
    private long ReviewIdToDelete { get; set; }

    private bool CollabDialogOpen { get; set; }
    private bool DeleteQuestionDialogOpen { get; set; }
    private bool DeleteAnswerDialogOpen { get; set; }
    private bool DeleteReviewDialogOpen { get; set; }
    private bool DeleteWseDialogOpen { get; set; }

    private void OpenCollabDialog() {
        CollabDialogOpen = true;
        StateHasChanged();
    }

    private void OnCollabDialogClose(bool accepted) {
        CollabDialogOpen = false;
        StateHasChanged();
    }

    private void OpenDeleteQuestionDialog(long questionId) {
        DeleteQuestionDialogOpen = true;
        QuestionIdToDelete = questionId;
        StateHasChanged();
    }

    private void OnDeleteQuestionDialogClose(bool accepted) {
        DeleteQuestionDialogOpen = false;
        StateHasChanged();
    }

    private void OpenDeleteAnswerDialog(long questionId, long answerId) {
        DeleteAnswerDialogOpen = true;
        QuestionIdToDelete = questionId;
        AnswerIdToDelete = answerId;
        StateHasChanged();
    }

    private void OnDeleteAnswerDialogClose(bool accepted) {
        DeleteAnswerDialogOpen = false;
        StateHasChanged();
    }

    private void OpenDeleteReviewDialog(long reviewId) {
        DeleteReviewDialogOpen = true;
        ReviewIdToDelete = reviewId;
        StateHasChanged();
    }

    private void OnDeleteReviewDialogClose(bool accepted) {
        DeleteReviewDialogOpen = false;
        StateHasChanged();
    }

    private void OpenDeleteWseDialog() {
        DeleteWseDialogOpen = true;
        StateHasChanged();
    }

    private void OnDeleteWseDialogClose(bool accepted) {
        DeleteWseDialogOpen = false;
        StateHasChanged();
    }

    [Parameter]
    public WebserviceEntry _wse { get; set; } = new();

    [CascadingParameter] 
    private LoginState LoginState { get; init; } = null!;

    private long _userId { get; set; } = new();
    private User? CurrentUser { get; set; }
    private WebserviceEntry[]? CurrentUserWse { get; set; }
    private WebserviceEntry[]? CurrentUserBookmarks { get; set; }

    private string? NewQuestion { get; set; }
    private string? NewAnswer { get; set; }

    private int ReviewPage = 1;
    private int ReviewEntryNum = 3;
    private Review[] _wseReviews = new Review[] { };
    private Review[] _wseNextReviews = new Review[] { };

    private int QuestionPage = 1;
    private int QuestionEntryNum = 3;
    private Question[] _wseQuestions = new Question[] { };
    private Question[] _wseNextQuestions = new Question[] { };

    private bool _isLoggedIn { get; set; }
    private bool _isCollab { get; set; }
    private bool _isBookmark { get; set; }
    private bool _displayEditForm = false;
    private double _avgReview { get; set; }

    private string ConflictMessage { get; set; } = null!;

	[Inject]
    private NavigationManager NavManager { get; set; } = null!;

	/*not working man*/
    private async void HandleValidSubmit() 
    {
        var response = await HttpClient.PostAsJsonAsync("wse", _wse);

        if (response.IsSuccessStatusCode) {
            NavManager.NavigateTo("wse/" + WseId);
        }
        else if (response.StatusCode == HttpStatusCode.Conflict) {
            /*TODO specify message*/
            ConflictMessage = "There was an conflict";
            StateHasChanged();
        } else {
            NavManager.NavigateTo("/internal-server-error");
        }
    }

    /*not working man*/
    private void CancelEdit() {
        NavManager.NavigateTo("wse/" + WseId);
    }

	protected override async Task OnInitializedAsync()
    {
        _wse = await HttpClient.GetFromJsonAsync<WebserviceEntry>("wse/" + WseId) ?? new WebserviceEntry() {};
        _isLoggedIn = LoginState.LoggedIn;
        if (_isLoggedIn)
        {
            _userId = LoginState.User!.Id;
            CurrentUser = await HttpClient.GetFromJsonAsync<User>("user/" + _userId);
        }
        await CheckCurrentUserCollab();
        await CheckCurrentUserBookmark();
        await InitReviews();
        await InitQuestions();
    }

    private async Task InitReviews()
    {
        _wseReviews = await HttpClient.GetFromJsonAsync<Review[]>
            ("wse/" + WseId + "/review?page=" + ReviewPage + "&entriesPerPage=" + ReviewEntryNum) ?? new Review[] {};
        ReviewPage++;
        _wseNextReviews = await HttpClient.GetFromJsonAsync<Review[]>
            ("wse/" + WseId + "/review?page=" + ReviewPage + "&entriesPerPage=" + ReviewEntryNum) ?? new Review[] {};
        ReviewPage++;
    }

    private async Task InitQuestions()
    {
        _wseQuestions = await HttpClient.GetFromJsonAsync<Question[]>
            ("wse/" + WseId + "/question?page=" + QuestionPage + "&entriesPerPage=" + QuestionEntryNum) ?? new Question[] {};
        QuestionPage++;
        _wseNextQuestions = await HttpClient.GetFromJsonAsync<Question[]>
            ("wse/" + WseId + "/question?page=" + QuestionPage + "&entriesPerPage=" + QuestionEntryNum) ?? new Question[] {};
        QuestionPage++;
    }

    private async Task GetNextReviews()
    {
        var loadedReviews = new Review[_wseReviews.Length + _wseNextReviews.Length];
        _wseReviews.CopyTo(loadedReviews, 0);
        _wseNextReviews.CopyTo(loadedReviews, _wseReviews.Length);
        _wseReviews = loadedReviews;

        _wseNextReviews = await HttpClient.GetFromJsonAsync<Review[]>
            ("wse/" + WseId + "/review?page=" + ReviewPage + "&entriesPerPage=" + ReviewEntryNum) ?? new Review[] {};
        ReviewPage++;
    }

    private async Task GetNextQuestions()
    {
        var loadedQuestions = new Question[_wseReviews.Length + _wseNextReviews.Length];
        _wseQuestions.CopyTo(loadedQuestions, 0);
        _wseNextQuestions.CopyTo(loadedQuestions, _wseReviews.Length);
        _wseQuestions = loadedQuestions;

        _wseNextQuestions = await HttpClient.GetFromJsonAsync<Question[]>
            ("wse/" + WseId + "/question?page=" + QuestionPage + "&entriesPerPage=" + QuestionEntryNum) ?? new Question[] {};
        QuestionPage++;
    }

    private async Task CheckCurrentUserCollab()
    {
        if (_isLoggedIn)
        {
            CurrentUserWse = await HttpClient.GetFromJsonAsync<WebserviceEntry[]>("user/" + _userId + "/wse");
            if (CurrentUserWse != null)
            {
                foreach (WebserviceEntry userWse in CurrentUserWse)
                {
                    if (userWse.Id == WseId)
                    {
                        _isCollab = true;
                        break;
                    }
                }
            }
        } else
        {
            NavManager.NavigateTo("login");
        }
    }

    private async Task CheckCurrentUserBookmark()
    {
        if (_isLoggedIn)
        {
            CurrentUserBookmarks = await HttpClient.GetFromJsonAsync<WebserviceEntry[]>("user/" + _userId + "/bookmarks");
            if (CurrentUserBookmarks != null)
            {
                foreach (WebserviceEntry userBm in CurrentUserBookmarks)
                {
                    if (userBm.Id == WseId)
                    {
                        _isBookmark = true;
                        break;
                    }
                }
            }
        } else
        {
            NavManager.NavigateTo("login");
        }
    }

    private async void ChangeBookmarkStatus()
    {
        if (_isLoggedIn)
        {
            if (!_isBookmark)
            {
                var response = await HttpClient.PostAsJsonAsync("user/" + _userId + "/bookmarks/add/" + WseId, "");
                if (response.IsSuccessStatusCode) {
                    _isBookmark = !_isBookmark;
                }
            } else
            {
                var response = await HttpClient.PostAsJsonAsync("user/" + _userId + "/bookmarks/remove/" + WseId, "");
                if (response.IsSuccessStatusCode) {
                    _isBookmark = !_isBookmark;
                }
            }
        } else
        {
            NavManager.NavigateTo("login");
        }
    }

    private async void SubmitNewQuestion() {
        if (NewQuestion != null && _isLoggedIn)
        {
            var response = await HttpClient.PutAsJsonAsync
                ("wse/question", new Question() {WseId = WseId, Text = NewQuestion, CreationTime = DateTimeOffset.UtcNow, CreatorId = _userId});

            if (response.IsSuccessStatusCode) {
                NavManager.NavigateTo("wse/" + WseId, forceLoad: true);
            }
            else if (response.StatusCode == HttpStatusCode.Conflict) {
                /*TODO specify message*/
                ConflictMessage = "There was an conflict";
                StateHasChanged();
            } else {
                NavManager.NavigateTo("/internal-server-error");
            }
        } else
        {
            NavManager.NavigateTo("login");
        }
	}
    /* API STUFF, DO MERGE */

    [Parameter]
    public long WseId { get; set; }

    [Parameter]
    public string WseName { get; set; }

	[Parameter]
    public WebserviceEntry Wse { get; set; }

	[Inject]
    private NavigationManager Manager { get; set; } = null!;

    protected override async Task OnParametersSetAsync() {
	    if (Wse?.Id != WseId) {
		    var response = await HttpClient.GetAsync($"wse/{WseId}");
		    if (response.IsSuccessStatusCode) {
			    Wse = (await response.Content.ReadFromJsonAsync<WebserviceEntry>())!;
			    var fullUrl = $"wse/{WseId}/{HttpUtility.UrlEncode(Wse.Name)}";
			    if (Manager.ToBaseRelativePath(Manager.Uri) != fullUrl) {
				    Manager.NavigateTo(fullUrl);
			    }
		    } else {
			    @* TODO not found *@
		    }
	    }
    }

}
