@using Models
@using Microsoft.EntityFrameworkCore.ChangeTracking
<div class="ui-field">
    <div class="form-control form-control-sm border p-0">
        <div class="input-group input-group-sm">
            <button class="btn btn-sm btn-link text-dark">
                <i class="fa fa-search"></i>
            </button>
            <input type="search" class="form-control form-control-sm border-0" placeholder="Suche nach..." @bind="_tagQuery" @onkeyup="SearchTags">
        </div>
    </div>
</div>
<div class="row mt-3 mb-1">
    @foreach (var tag in _selectedTags) {
        <div class="col-auto">
            <h6>
                <span class="badge bg-info">
                    @tag.Name
                    <button type="button" class="btn-close btn-close-white" aria-label="Close" @onclick="() => RemoveTagFromSelection(tag)"></button>
                </span>
            </h6>
        </div>
    }
</div>

<div class="ui-field p-3">
    @if (_allTags is null) {
        <p><strong>Lade Tags...</strong></p>
        <div class="spinner-border ms-3" role="status" aria-hidden="true"></div>
    } else {
        @foreach (var tag in _searchedTags) {
            // this should be contains but isn't because useCount isn't implemented properly
            var value = _selectedTags.Any(tag1 => tag1.Name.Equals(tag.Name));
            <div class="form-check">
                @if (value) {
                    <input class="form-check-input" type="checkbox" @onclick="() => RemoveTagFromSelection(tag)" checked id="@tag.Name"/>
                } else {
                    <input class="form-check-input" type="checkbox" @onclick="() => AddTagToSelection(tag)" id="@tag.Name"/>
                }
                <label class="form-check-label" for="@tag.Name">@tag.Name</label>
            </div>
        }
    }
</div>

<div class="d-grid gap-2 mt-3 d-flex justify-content-end">
    <button type="button" class="btn btn-outline-danger btn-small" @onclick="ClearSelection">Alle Tags Löschen</button>
</div>

@code {
    
    [Inject]
    public HttpClient HttpClient { get; set; } = default!;
    
    [Parameter]
    public string[]? SelectedTagsStr { get; set; }

    // Two-way-binding of tag collection
    [Parameter]
    public ISet<Tag> SelectedTags { get; set; } = null!;

    // Two-way-binding of tag collection
    [Parameter]
    public EventCallback<ISet<Tag>> SelectedTagsChanged { get; set; }

    private IEnumerable<Tag>? _allTags;

    private ICollection<Tag> _searchedTags = new List<Tag>();

    private ISet<Tag> _selectedTags = new HashSet<Tag>();

    private string? _tagQuery;

    private async Task RemoveTagFromSelection(Tag tag) {
        _selectedTags.ExceptWith(new []{tag});
        await SelectedTagsChanged.InvokeAsync(_selectedTags);
    }

    private async Task AddTagToSelection(Tag tag) {
        _selectedTags.Add(tag);
        await SelectedTagsChanged.InvokeAsync(_selectedTags);
    }

    private async Task ClearSelection() {
        _selectedTags.Clear();
        await SelectedTagsChanged.InvokeAsync(_selectedTags);
    }

    private void SearchTags(KeyboardEventArgs evt) {
        if (evt.Key == "Enter" && _tagQuery is not null) {
            _searchedTags = _allTags!.Where(tag => tag.Name.Contains(_tagQuery))
                .OrderByDescending(tag => tag.UseCount)
                .ToList();
        }
    }

    protected override async Task OnInitializedAsync() {
        _allTags = await HttpClient.GetFromJsonAsync<IList<Tag>>("tag") ?? new List<Tag>();
        _searchedTags = _allTags.OrderByDescending(tag => tag.UseCount).ToList();
        _selectedTags = SelectedTags;
        //If no selected tags have been provided, check for selected tags string
        if (!_selectedTags.Any()) {
            _selectedTags = SelectedTagsStr is null
                ? new HashSet<Tag>()
                : _allTags
                    .Where(tag => SelectedTagsStr.Contains(tag.Name)).ToHashSet();
        }
    }

}
