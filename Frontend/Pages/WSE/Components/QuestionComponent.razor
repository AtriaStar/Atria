@using Models
@using Frontend.Services
@using System.Net
<div class="accordion mb-4" id="questionAccordion">
    <div class="accordion-item">
        <div class="accordion-header px-4 py-3 bg-light border-bottom" id="question">
            <div class="row">
                <div class="col-auto">
                    <h6 class="fw-bold mt-1">Frage:</h6>
                </div>
                <div class="col ms-3">
                    <h6 class="fw-bold mt-1 mb-1">
                        @QuestionCreator.FirstNames @QuestionCreator.LastName
                        <small class="text-muted">
                            <Tooltip Text="@Question.CreationTime.ToString()">
                                @NiceTimeSpanFormatterService.NiceFormat(DateTimeOffset.UtcNow - Question.CreationTime)
                            </Tooltip>
                        </small>
                    </h6>
                    @Question.Text
                </div>
            </div>
            <div class="d-grid gap-2 mt-3 mb-2 d-flex justify-content-end">
                @if (!_createNewAnswer) {
                    <AuthView>
                        <Authorized>
                            <button class="btn btn-outline-success btn-small" type="button" @onclick="() => _createNewAnswer = !_createNewAnswer">
                                Antworten
                            </button>
                        </Authorized>
                    </AuthView>
                    <AuthView UserIdClaim="Question.CreatorId">
                        <AuthorizedAndMatching>
                            <DeleteModal
                                ModalTitle="Frage löschen"
                                ModalBody="Sind Sie sicher, dass Sie Ihre Frage löschen möchten?"
                                ToDelete="question"
                                WseId="WseId"
                                QuestionId="Question.Id"
                                ButtonStyle="btn-outline-danger btn-small"/>
                        </AuthorizedAndMatching>
                    </AuthView>
                }

                @if (_answerCount != 0 && !_createNewAnswer) {
                    <button class="btn btn-small btn-outline-secondary collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#answerOne" aria-expanded="false" aria-controls="answerOne">
                        Antworten anzeigen
                    </button>
                }
            </div>
            @if (_createNewAnswer) {
                <div class="row">
                    <input class="form-control mb-2" @bind="_newAnswer"/>
                </div>
                <div class="d-grid gap-2 mt-3 mb-2 d-flex justify-content-end">
                    <button class="btn btn-outline-danger btn-small" type="submit" @onclick="() => _createNewAnswer = !_createNewAnswer">
                        Abbrechen
                    </button>
                    <button class="btn btn-outline-success btn-small" type="submit" @onclick="CreateNewAnswer">
                        Antworten
                    </button>
                </div>
                @if (_errorMessage is not null) {
                    <div class="fw-bold text-danger">
                        @_errorMessage
                    </div>
                }
            }
        </div>

        <div id="answerOne" class="accordion-collapse collapse" aria-labelledby="question" data-bs-parent="#questionAccordion">
            <div class="accordion-body">
                <ul class="list-group list-group-flush py-0">
                    @foreach (var answer in _answers) {
                        <AnswerComponent Answer="answer"/>
                    }
                </ul>
            </div>

            @if (_currentAnswerPage * AnswerEntriesPerPage < _answerCount) {
                <div class="d-grid d-flex mt-4 mb-4 justify-content-center">
                    <button class="btn btn-outline-secondary btn-small" type="button" @onclick="GetNextAnswers">weitere Antworten</button>
                </div>
            }
        </div>
    </div>
</div>

@code {

        private const int AnswerEntriesPerPage = 3;

    [Inject]
    private HttpClient HttpClient { get; set; } = default!;

    [Inject]
    private NavigationManager NavManager { get; set; } = null!;

    [Parameter]
    public Question Question { get; set; } = null!;

    [Parameter]
    public long WseId { get; set; }

    private User QuestionCreator { get; set; } = new();

    private bool _createNewAnswer = false;
    private string? _newAnswer;

    private long _answerCount;
    private int _currentAnswerPage;
    private IEnumerable<Answer> _answers = new List<Answer>();

    private string? _errorMessage;

    protected override async Task OnInitializedAsync() {
        QuestionCreator = await HttpClient.GetFromJsonAsync<User>("user/" + Question.CreatorId) ?? new User();

        _answerCount = await HttpClient.GetFromJsonAsync<long>($"wse/{WseId}/question/{Question.Id}/count");
        if (_answerCount != 0) {
            await GetNextAnswers();
        }
    }

    private async Task GetNextAnswers() {
        _currentAnswerPage++;
        var nextAnswers = (await HttpClient.GetFromJsonAsync<IEnumerable<Answer>>(
            "wse/" + WseId + "/question/" + Question.Id + "?page=" + _currentAnswerPage + "&entriesPerPage=" + AnswerEntriesPerPage))!;
        foreach (var answer in nextAnswers) {
            _answers = _answers.Append(answer);
        }
    }

    private async Task CreateNewAnswer() {
        if (_newAnswer == null) {
            return;
        }
        var response = await HttpClient.PutAsJsonAsync("wse/answer", new Answer {
            Text = _newAnswer,
            WseId = WseId,
            QuestionId = Question.Id
        });

        if (response.IsSuccessStatusCode) {
            NavManager.NavigateTo("wse/" + WseId, true);
        } else if (response.StatusCode == HttpStatusCode.Conflict) {
            _errorMessage = await response.Content.ReadAsStringAsync();
            StateHasChanged();
        } else {
            NavManager.NavigateTo("/internal-server-error");
        }
    }

}
