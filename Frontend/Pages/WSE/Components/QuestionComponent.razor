@using Models
@using System.Web
@using System.Net

<div class="accordion mb-4" id="questionAccordion">
    <div class="accordion-item">
        <div class="accordion-header px-4 py-3 bg-light border-bottom" id="question">
            <div class="row">
                <div class="col-auto">
                    <h6 class="fw-bold mt-1">Frage:</h6>
                </div>
                <div class="col ms-3">
                    <h6 class="fw-bold mt-1 mb-1">
                        @QuestionCreator.FirstNames @QuestionCreator.LastName
                        <small class="text-muted">@Question.CreationTime</small>
                    </h6>
                    @Question.Text
                </div>
            </div>
            <div class="d-grid gap-2 mt-3 mb-2 d-flex justify-content-end">
                @if (_isLoggedIn)
                {
                    @if (!_createNewAnswer)
                    {
                        <button class="btn btn-outline-success btn-small" type="button" @onclick="() => _createNewAnswer = !_createNewAnswer">
                            Antworten
                        </button>
                    }
                    
                    @if (Question.CreatorId == _userId && !_createNewAnswer)
                    {
                        <DeleteModal
                            ModalTitle="Frage löschen" 
                            ModalBody="Sind Sie sicher, dass Sie Ihre Frage löschen möchten?" 
                            ToDelete="question" 
                            WseId="WseId"
                            QuestionId="Question.Id" 
                            ButtonStyle="btn-outline-danger btn-small"/>
                    }
                }
                        
                @if (Answers.Length != 0 && !_createNewAnswer)
                {
                    <button class="btn btn-small btn-outline-secondary collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#answerOne" aria-expanded="false" aria-controls="answerOne">
                        Antworten anzeigen
                    </button>
                }
            </div>
            @if (_createNewAnswer)
            {
                <div class="row">
                    <input class="form-control mb-2" @bind="_newAnswer"/> 
                </div>
                <div class="d-grid gap-2 mt-3 mb-2 d-flex justify-content-end">
                    <button class="btn btn-outline-danger btn-small" type="submit" @onclick="() => _createNewAnswer = !_createNewAnswer">
                        Abbrechen
                    </button>
                    <button class="btn btn-outline-success btn-small" type="submit" @onclick="CreateNewAnswer">
                        Antworten
                    </button>
                </div>
            }
        </div>

        <div id="answerOne" class="accordion-collapse collapse" aria-labelledby="question" data-bs-parent="#questionAccordion">
            <div class="accordion-body">
                <ul class="list-group list-group-flush py-0">
                    @foreach (Answer answer in Answers)
                    {
                        <AnswerComponent Answer="answer" Question="Question" WseId="WseId" _isLoggedIn="_isLoggedIn" _userId="_userId"/>
                    }
                </ul>
            </div>

            @if (NextAnswers.Length != 0)
            {
                <div class="d-grid d-flex mt-4 mb-4 justify-content-center">
                    <button class="btn btn-outline-secondary btn-small" type="button" @onclick="GetNextAnswers">weitere Antworten</button>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Inject]
    private HttpClient HttpClient { get; set; } = default!;

    [Inject]
    private NavigationManager NavManager { get; set; } = null!;

    [Parameter]
    public Question Question { get; set; } = null!;

    [Parameter]
    public long WseId { get; set; }

    [Parameter]
    public bool _isLoggedIn { get; set; }

    [Parameter]
    public long _userId { get; set; }

    private User QuestionCreator { get; set; } = new();

    private bool _createNewAnswer = false;
    private string _newAnswer { get; set; } = null!;

    private int AnswerPage = 1;
    private int AnswerEntryNum = 3;
    private Answer[] Answers = new Answer[] { };
    private Answer[] NextAnswers = new Answer[] { };

    private string ConflictMessage { get; set; } = null!;

    protected override async Task OnInitializedAsync() {
        QuestionCreator = await HttpClient.GetFromJsonAsync<User>("user/" + Question.CreatorId) ?? new User() {};

        Answers = await HttpClient.GetFromJsonAsync<Answer[]>
            ("wse/" + WseId + "/question/" + Question.Id + "?page=" + AnswerPage + "&entriesPerPage=" + AnswerEntryNum) ?? new Answer[] {};
        AnswerPage++;
        NextAnswers = await HttpClient.GetFromJsonAsync<Answer[]>
            ("wse/" + WseId + "/question/" + Question.Id + "?page=" + AnswerPage + "&entriesPerPage=" + AnswerEntryNum) ?? new Answer[] {};
        AnswerPage++;
    }

    private async Task GetNextAnswers() {
        var loadedAnswers = new Answer[Answers.Length + NextAnswers.Length];
        Answers.CopyTo(loadedAnswers, 0);
        NextAnswers.CopyTo(loadedAnswers, Answers.Length);
        Answers = loadedAnswers;

        NextAnswers = await HttpClient.GetFromJsonAsync<Answer[]>
            ("wse/" + WseId + "/question/" + Question.Id + "?page=" + AnswerPage + "&entriesPerPage=" + AnswerEntryNum) ?? new Answer[] {};
        AnswerPage++;
    }

    private async Task CreateNewAnswer() {
        var response = await HttpClient.PutAsJsonAsync("wse/answer", new Answer {Text = _newAnswer, WseId = WseId, QuestionId = Question.Id});

        if (response.IsSuccessStatusCode) {
            NavManager.NavigateTo("wse/" + WseId, true);
        }
        else if (response.StatusCode == HttpStatusCode.Conflict) {
            /*TODO specify message*/
            ConflictMessage = "There was an conflict";
            StateHasChanged();
        }
        else {
            NavManager.NavigateTo("/internal-server-error");
        }
    }
}