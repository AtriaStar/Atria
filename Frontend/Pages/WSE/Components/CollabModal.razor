@using Models
@using Models.DTO
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@using System.Reactive.Subjects
@using System.Reactive.Linq
@implements IDisposable

<button class="btn btn-outline-secondary btn-small ms-2" @onclick="() => ModalBase.Open()">weitere Kollaboratoren</button>

<ModalBase @ref="ModalBase">
    <ModalTitle>Kollaboratoren</ModalTitle>
    <ModalBody>
        @foreach (User user in _collaboratorsAsUsers) {
            <div class="card mb-2 flex-row">
                <div class="img-wrap m-2">
                    @if (user.ProfilePicture is not null) {
                        <img alt="avatar" src="@user.ProfilePicture">
                    } else {
                        <img alt="default avatar" src="images/default_avatar.png"/>
                    }
                </div>
                <div class="card-body">
                    <div class="card-title">
                        <NavLink href="@GetLinkToProfile(user)">@user.FirstNames @user.LastName</NavLink>
                        @if (user.Id == WseContactPersonId) {
                            <small style="color: red"> *Ansprechpartner</small>
                        }
                    </div>
                    <div class="card-subtitle mb-1">@user.Email</div>
                    <AuthView UserIdClaimCollection="_idsWithEditRights">
                        <AuthorizedAndMatching>
                            <div class="d-grid d-flex justify-content-end">
                                <button class="btn btn-outline-danger btn-small" type="button" @onclick="() => RemoveCollabById(user.Id)">
                                    Entfernen
                                </button>
                            </div>
                        </AuthorizedAndMatching>
                    </AuthView>
                </div>
            </div>
        }
        <AuthView UserIdClaimCollection="_idsWithEditRights">
            <AuthorizedAndMatching>
                <label class="form-label fs-6 mt-2">E-Mail oder Name des neuen Kollaborators</label>
                <div class="ui-field">
                    <input class="form-control" type="text" @oninput="_collabQuery.OnNext"/>
                </div>
                <select class="form-select mt-2" size="6" @bind="_userToAdd">
                    @foreach (User user in _usersFound) {
                        <option value="@user.Id">@user.FirstNames @user.LastName @user.Email</option>
                    }
                </select>
                <div class="d-grid gap-2 mt-3 mb-2 d-flex justify-content-end">
                    <button type="button" class="btn btn-success" @onclick="AddCollab">Hinzufügen</button>
                </div>
            </AuthorizedAndMatching>
        </AuthView>

    </ModalBody>
</ModalBase>

@code {

    private Subject<ChangeEventArgs> _collabQuery = new();
    private IDisposable? _collabQuerySubscription;
    private IEnumerable<User> _usersFound = new User[] { };
    private long? _userToAdd;

    private ModalBase ModalBase { get; set; } = null!;

    [Parameter]
    public long WseId { get; set; }

    [Parameter]
    public long WseContactPersonId { get; set; }

    [CascadingParameter]
    public LoginState LoginState { get; set; } = default!;

    private ICollection<Collaborator>? _collaborators;

    private ICollection<User> _collaboratorsAsUsers = new List<User>();

    private long[] _idsWithEditRights = { };

    protected override async Task OnInitializedAsync() {
        _collaborators = await HttpClient.GetFromJsonAsync<ICollection<Collaborator>>("wse/" + WseId + "/collaborators") ?? new Collaborator[] { };
        foreach (Collaborator collab in _collaborators) {
            User user = await HttpClient.GetFromJsonAsync<User>("user/" + collab.UserId) ?? throw new InvalidOperationException();
            _collaboratorsAsUsers.Add(user);
        }
        _idsWithEditRights = _collaborators
            .Where(collaborator => (collaborator.Rights & WseRights.EditCollaborators) != 0)
            .Select(collaborator => collaborator.UserId)
            .ToArray();

        _collabQuerySubscription = _collabQuery
            .Throttle(TimeSpan.FromMilliseconds(500))
            .Select(e => (string?)e.Value)
            .Select(v => v?.Trim())
            .DistinctUntilChanged()
            .Select(SearchThings)
            .Switch()
            .Subscribe(users => {
                _usersFound = users;
                StateHasChanged();
            });
    }

    private async Task<IEnumerable<User>> SearchThings(string? searchTerm = null) {
        var response = await HttpClient.GetAsync($"search/user?query={searchTerm}");
        if (response.IsSuccessStatusCode) {
            return (await response.Content.ReadFromJsonAsync<IEnumerable<User>>())!;
        }
        return Array.Empty<User>();
    }

    private async Task AddCollab() {
        if (_userToAdd == null) {
            return;
        }
        _collaborators!.Add(new Collaborator {
            UserId = _userToAdd.Value,
            Rights = WseRights.EditData
        });
        var response = await HttpClient.PostAsJsonAsync($"wse/{WseId}/collaborators", _collaborators);
        if (response.IsSuccessStatusCode) {
            var user = await HttpClient.GetFromJsonAsync<User>("user/" + _userToAdd.Value) ?? throw new InvalidOperationException();
            _collaboratorsAsUsers.Add(user);
        }
    }

    private async Task RemoveCollabById(long userId) {
        _collaborators!.Remove(_collaborators.Single(collaborator => collaborator.UserId == userId));
        var response = await HttpClient.PostAsJsonAsync($"wse/{WseId}/collaborators", _collaborators);
        if (response.IsSuccessStatusCode) {
            _collaboratorsAsUsers.Remove(_collaboratorsAsUsers.Single(user => user.Id == userId));
        }
    }

    public void Dispose() => _collabQuerySubscription?.Dispose();

    private string GetLinkToProfile(User user) {
        return "profile/" + user.Id;
    }

}
