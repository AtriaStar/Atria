@page "/register"
@using Microsoft.AspNetCore.Components
@using Models.DTO
@using System.Net
@inject NavigationManager NavManager

<PageTitle>Registrieren - Atria</PageTitle>

<div class="container">
    <div class="row p-2 pt-4">
        <div class="col text-center">
            <h2>Registrieren</h2>
        </div>
    </div>
    <div class="row p-2 justify-content-center">
        <div class="col-lg-5 card">
            <div class="card-body">
                <EditForm Model="_registrationDto" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator></DataAnnotationsValidator>
                    <ValidationSummary></ValidationSummary>
                    <div class="row py-3">
                        <div class="col">
                            <label for="lastName" class="form-label">Name</label>
                            <div>
                                <InputText id="lastName" class="form-control" @bind-Value="_registrationDto.LastName"></InputText>
                                <ValidationMessage For="() => _registrationDto.LastName"></ValidationMessage>
                            </div>
                        </div>
                    </div>

                    <div class="row py-3">
                        <div class="col">
                            <label for="firstName" class="form-label">Vorname</label>
                            <div>
                                <InputText id="firstName" class="form-control" @bind-Value="_registrationDto.FirstNames"></InputText>
                                <ValidationMessage For="() => _registrationDto.FirstNames"></ValidationMessage>
                            </div>
                        </div>
                    </div>

                    <div class="row py-3">
                        <div class="col">
                            <label for="email" class="form-label">E-Mail</label>
                            <div>
                                <InputText type="email" id="email" class="form-control" @bind-Value="_registrationDto.Email"></InputText>
                                <ValidationMessage For="() => _registrationDto.Email"></ValidationMessage>
                            </div>
                        </div>
                    </div>

                    <div class="row py-3">
                        <div class="col">
                            <label for="password" class="form-label">Passwort</label>
                            <div>
                                <InputText type="password" id="password" class="form-control" @bind-Value="_registrationDto.Password"></InputText>
                                <ValidationMessage For="() => _registrationDto.Password"></ValidationMessage>
                            </div>
                        </div>
                    </div>

                    <div class="row py-3">
                        <div class="col">
                            <label for="confirmPassword" class="form-label">Passwort bestätigen</label>
                            <div>
                                <InputText type="password" id="confirmPassword" class="form-control" @bind-Value="_registrationDto.ConfirmPassword"></InputText>
                                <ValidationMessage For="() => _registrationDto.ConfirmPassword"></ValidationMessage>
                            </div>
                        </div>
                    </div>

                    @if (_processingRequest) {
                        <div class="row py-3 justify-content-center">
                            <div class="col-6 d-flex align-items-center">
                                <strong>Loading...</strong>
                                <div class="spinner-border ms-auto" role="status" aria-hidden="true"></div>
                            </div>
                        </div>
                    } else {
                        <div class="row py-3 justify-content-center">
                            <div class="col-6 d-grid">
                                <button type="submit" class="btn btn-primary">Registrieren</button>
                            </div>
                        </div>
                    }
                </EditForm>

                <div class="text-center fw-bold text-danger">
                    @RegisterMessage
                </div>
            </div>
        </div>
    </div>

    <div class="text-center p-2">
        Sie sind bereits registriert? <NavLink href="login">Hier anmelden</NavLink>
    </div>
</div>

@code {

    [Inject]
    HttpClient HttpClient { get; set; } = default!;

    [CascadingParameter]
    public LoginState LoginState { get; set; } = default!;

    private bool _processingRequest;
    private string RegisterMessage { get; set; } = null!;

    private readonly RegistrationDto _registrationDto = new();

    protected override async Task OnInitializedAsync() {
        await LoginState.Init;
        if (LoginState.LoggedIn) {
            NavManager.NavigateTo("");
        }
    }

    private async void HandleValidSubmit() {
        _processingRequest = true;
        RegisterMessage = "";
        var response = await HttpClient.PostAsJsonAsync("auth/register", _registrationDto);
        if (response.IsSuccessStatusCode) {
            NavManager.NavigateTo("", forceLoad: true);
        } else if (response.StatusCode == HttpStatusCode.Conflict) {
            RegisterMessage = "Email is already taken";
            StateHasChanged();
        } else {
            NavManager.NavigateTo("/internal-server-error");
        }
        _processingRequest = false;
        StateHasChanged();
    }

}
