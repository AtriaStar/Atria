@page "/register"
@using Microsoft.AspNetCore.Components
@using Models
@using Models.DTO
@using System.Net
@inject NavigationManager NavManager
@inject HttpClient HttpClient

@* TODO page title*@

<div class="container">
    <div class="row p-2 pt-4">
        <div class="col text-center">
            <h2>Registrieren</h2>
        </div>
    </div>
    <div class="row p-2 justify-content-center">
        <div class="col-lg-5 card">
            <div class="card-body">
                <EditForm Model="_registration" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator></DataAnnotationsValidator>
                    <ValidationSummary></ValidationSummary>
                    <div class="row py-3">
                        <div class="col">
                            <label for="lastName" class="form-label">Name</label>
                            <div>
                                <InputText id="lastName" class="form-control" @bind-Value="_registration.LastName"></InputText>
                                <ValidationMessage For="() => _registration.LastName"></ValidationMessage>
                            </div>
                        </div>
                    </div>

                    <div class="row py-3">
                        <div class="col">
                            <label for="firstName" class="form-label">Vorname</label>
                            <div>
                                <InputText id="firstName" class="form-control" @bind-Value="_registration.FirstNames"></InputText>
                                <ValidationMessage For="() => _registration.FirstNames"></ValidationMessage>
                            </div>
                        </div>
                    </div>

                    <div class="row py-3">
                        <div class="col">
                            <label for="email" class="form-label">E-Mail</label>
                            <div>
                                <InputText type="email" id="email" class="form-control" @bind-Value="_registration.Email"></InputText>
                                <ValidationMessage For="() => _registration.Email"></ValidationMessage>
                            </div>
                        </div>
                    </div>

                    <div class="row py-3">
                        <div class="col">
                            <label for="password" class="form-label">Passwort</label>
                            <div>
                                <InputText type="password" id="password" class="form-control" @bind-Value="_registration.Password"></InputText>
                                <ValidationMessage For="() => _registration.Password"></ValidationMessage>
                            </div>
                        </div>
                    </div>

                    <div class="row py-3">
                        <div class="col">
                            <label for="confirmPassword" class="form-label">Passwort</label>
                            <div>
                                <InputText type="password" id="confirmPassword" class="form-control" @bind-Value="_registration.ConfirmPassword"></InputText>
                                <ValidationMessage For="() => _registration.ConfirmPassword"></ValidationMessage>
                            </div>
                        </div>
                    </div>

                    <div class="row py-3 justify-content-center">
                        <div class="col-6 d-grid">
                            <button type="submit" class="btn btn-primary">Registrieren</button>
                        </div>
                    </div>
                </EditForm>

                <div class="text-center fw-bold text-danger">
                    @RegisterMessage
                </div>
            </div>
        </div>
    </div>


    <div class="text-center p-2">
        Sie sind bereits registriert? <NavLink href="login">Hier anmelden</NavLink>
    </div>
    @* TEST, DELETE LATER
    <button @onclick="Test">Test</button>
    <p>FUNNY @CurrentUser?.FirstNames</p>
*@
</div>


@code {

    [CascadingParameter]
    private User? CurrentUser { get; set; }

    private string RegisterMessage { get; set; } = null!;

    private readonly Registration _registration = new();
        @* TEST, DELETE LATER
	private async Task Test() {
		var response = await HttpClient.GetAsync("auth/sessions");
		Console.WriteLine("POGGERS!");
	}
*@

    protected override void OnParametersSet() {
        if (CurrentUser is not null) {
            NavManager.NavigateTo("");
        }
    }

    private async void HandleValidSubmit() {
        var response = await HttpClient.PostAsJsonAsync("auth/register", _registration);

        if (response.IsSuccessStatusCode) {
            NavManager.NavigateTo("");
        }
        else if (response.StatusCode == HttpStatusCode.Conflict) {
            RegisterMessage = "Email is already taken";
            StateHasChanged();
        }
        else {
            NavManager.NavigateTo("/internal-server-error");
        }
    }
}