@page "/ResetPassword"
@using Models.DTO

<PageTitle>Password zurücksetzen - Atria</PageTitle>

<div class="container overflow-hidden">
    <div class="row p-2 pt-4">
        <div class="col text-center">
            <h2>Passwort zurücksetzen</h2>
        </div>
    </div>
    <div class="row p-2 justify-content-center">
        <div class="col-lg-5 card">
            <div class="card-body">
                <EditForm Model="_resetDto" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator></DataAnnotationsValidator>
                    <ValidationSummary></ValidationSummary>
                    <div class="row py-3">
                        <div class="col">
                            <label for="password" class="form-label">Neues Passwort</label>
                            <div>
                                <InputText type="password" id="password" class="form-control" @bind-Value="_resetDto.Password"></InputText>
                                <ValidationMessage For="() => _resetDto.Password"></ValidationMessage>
                            </div>
                        </div>
                    </div>
                    <div class="row py-3">
                        <div class="col">
                            <label for="confirmPassword" class="form-label">Neues Passwort bestätigen</label>
                            <div>
                                <InputText type="password" id="confirmPassword" class="form-control" @bind-Value="_resetDto.ConfirmPassword"></InputText>
                                <ValidationMessage For="() => _resetDto.ConfirmPassword"></ValidationMessage>
                            </div>
                        </div>
                    </div>
                    @if (_isSuccessful) {
                        <div class="row py-3 justify-content-center">
                            <p>Ihr Passwort wurde erfolgreich neu gesetzt!</p>
                            <p>Sie werden in @_time Sekunden zur Login Seite weitergeleitet...</p>
                        </div>
                    } else {
                        <div class="row py-3 justify-content-center">
                            <div class="col-6 d-grid">
                                <button type="submit" class="btn btn-primary">Absenden</button>
                            </div>
                        </div>
                    }
                    <div class="row py-3 justify-content-center">
                        <div class="text-center fw-bold text-danger">
                            @_errorMessage
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {

    private bool _isSuccessful;
    private string? _errorMessage;

    private int _time = 3;

    [Inject]
    HttpClient HttpClient { get; set; } = default!;

    [Inject]
    private NavigationManager NavigationManager { get; set; } = default!;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Token { get; set; } = null!;

    private readonly ResetPasswordDto _resetDto = new();

    private async void HandleValidSubmit() {
        _resetDto.Token = Token;
        var response = await HttpClient.PostAsJsonAsync("auth/reset/finish", _resetDto);

        if (response.IsSuccessStatusCode) {
            _isSuccessful = true;
            while (_time > 0) {
                _time--;
                StateHasChanged();
                await Task.Delay(1000);
            }
            NavigationManager.NavigateTo("login");
        } else {
            _errorMessage = await response.Content.ReadAsStringAsync();
            StateHasChanged();
        }
    }

}
