@using Frontend.Pages.UserManagement
@inherits TestContext
@code {

    private async Task Setup(bool isAuthorized) {
        var mockHttpHandler = Services.AddMockHttpClient();
        await MockAuthentication.AddMockAuthentication(this, mockHttpHandler, isAuthorized);
        var navMan = Services.GetRequiredService<FakeNavigationManager>();
        navMan.NavigateTo("/register");
    }

    [Fact]
    public async Task InvalidEmailTest1() {
        await InvalidEmailTestHelper("email");
    }

    [Fact]
    public async Task InvalidEmailTest2() {
        await InvalidEmailTestHelper("email@");
    }

    [Fact]
    public async Task InvalidEmailTest3() {
        await InvalidEmailTestHelper("e@@e.de");
    }

    private async Task InvalidEmailTestHelper(string emailToTest) {
        await Setup(false);
        
        var cut = RenderComponent<Register>();
        cut.Find("input[type=email]").Change(emailToTest);
        cut.Find("form").Submit();

        var valList = cut.Find("ul[class=validation-errors]");
        var c = cut.Find("label[for=email] + div > div");
        c.MarkupMatches(@<div class="validation-message">The Email field is not a valid e-mail address.</div>);
    }

}
