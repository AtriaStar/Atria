@using Frontend
@using Frontend.Pages.UserManagement
@using RichardSzalay.MockHttp
@using System.Net
@code {

    [Fact]
    public void NoInputTest() {
        // Arrange
        using var context = new TestContext();
        LoginState loginState = new LoginState(new HttpClient());
        
        // Act
        var cut = context.RenderComponent<Login>(parameters => parameters.Add(p => p.LoginState, loginState));
        cut.Find("button[type=submit]").Click();

        // Assert
        var valList = cut.Find("ul[class=validation-errors]");
        valList.MarkupMatches(
            @"<ul class=""validation-errors"">
                <li class=""validation-message"">
                    The Email field is required.
                </li>
                <li class=""validation-message"">
                    The Password field is required.
                </li>
            </ul>");
    }
    
    
    [Fact]
    public void InvalidEmailTest() {
        using var context = new TestContext();
        LoginState loginState = new LoginState(new HttpClient());

        var cut = context.RenderComponent<Login>(parameters => parameters.Add(p => p.LoginState, loginState));
        cut.Find("input[type=email]").Change("email");

        var valList = cut.Find("ul[class=validation-errors]");
        valList.MarkupMatches(
            @"<ul class=""validation-errors"">
                <li class=""validation-message"">
                    The Email field is not a valid e-mail address.
                </li>
            </ul>");
        var valMessage = cut.Find("div[class=validation-message]");
        valMessage.MarkupMatches(
            @"<div class=""validation-message"">The Email field is not a valid e-mail address.</div>");
    }

    [Fact]
    public void ValidInput() {
        using var context = new TestContext();
        var mock = context.Services.AddMockHttpClient();
        LoginState loginState = new LoginState(context.Services.GetRequiredService<HttpClient>());
        mock.When("http://localhost/auth/login").Respond(HttpStatusCode.OK);
        var navMan = context.Services.GetRequiredService<FakeNavigationManager>();
        navMan.NavigateTo("/login");

        var cut = context.RenderComponent<Login>(parameters => parameters.Add(p => p.LoginState, loginState));
        cut.Find("#email").Change("mock@mock");
        cut.Find("#password").Change("mocking");
        cut.Find("form").Submit();

        cut.WaitForAssertion(() => Assert.Equal("http://localhost/", navMan.Uri));
    }

}
